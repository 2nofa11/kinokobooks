<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<title>Make Interfaces Easy to Use Correctly and Hard to Use Incorrectly - Programmer 97-things</title>
<meta property="og:title" content="Make Interfaces Easy to Use Correctly and Hard to Use Incorrectly">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_en/Make_Interfaces_Easy_to_Use_Correctly_and_Hard_to_Use_Incorrectly.htm">
<meta property="og:site_name" content="97 Things Every Programmer Should Know.">
<meta property="og:locale" content="en_US">
<script type="text/javascript" src="../js/darkmode.js"></script>
</head>
<body>
<article>
<header>
<h1 class="firstHeading">Make Interfaces Easy to Use Correctly and Hard to Use Incorrectly</h1>
</header>

<p>One of the most common tasks in software development is interface specification. Interfaces occur at the highest level of abstraction (user interfaces), at the lowest (function interfaces), and at levels in between (class interfaces, library interfaces, etc.). Regardless of whether you work  with end users to specify how they'll interact with a system,  collaborate with developers to specify an API, or declare functions private to a class, interface design is an important part of your job. If you do it well, your interfaces will be a pleasure to use and will boost others' productivity. If you do it poorly, your interfaces will be a source of frustration and errors.
</p>
<p>Good interfaces are:
</p>
<ul><li> <b>Easy to use correctly.</b> People using a well-designed interface almost always use the interface correctly, because that's the path of least resistance. In a GUI, they almost always click on the right icon, button, or menu entry, because it's the obvious and easy thing to do. In an API, they almost always pass the correct parameters with the correct values, because that's what's most natural. With interfaces that are easy to use correctly, <i>things just work.</i>
</li></ul>
<ul><li> <b>Hard to use incorrectly.</b> Good interfaces anticipate mistakes people might make and make them difficult &mdash; ideally impossible &mdash; to commit. A GUI might disable or remove commands that make no sense in the current context, for example, or an API might eliminate argument-ordering problems by allowing parameters to be passed in any order.
</li></ul>
<p>A good way to design interfaces that are easy to use correctly is to exercise them before they exist. Mock up a GUI &mdash; possibly on a whiteboard or using index cards on a table &mdash; and play with it before any underlying code has been created.  Write calls to an API before the functions have been declared. Walk through common use cases and specify how you <i>want</i> the interface to behave. What do you <i>want</i> to be able to click on? What do you <i>want</i> to be able to pass? Easy to use interfaces seem natural, because they let you  do what you want to do. You're more likely to come up with such interfaces if you develop them from a user's point of view. (This perspective is one of the strengths of test-first programming.)
</p>
<p>Making interfaces hard to use incorrectly requires two things. First, you must anticipate errors users might make and find ways to prevent them. Second, you must observe how an interface is misused during early release and modify the interface &mdash; yes, modify the interface! &mdash; to prevent such errors. The best way to prevent incorrect use is to make such use impossible. If users keep wanting to undo an irrevocable action, try to make the action revocable. If they keep passing the wrong value to an API, do your best to modify the API to take the values that users want to pass.
</p>
<p>Above all, remember that interfaces exist for the convenience of their users, not their implementers.
</p>
<footer>
<p class="author">By Scott Meyers
</p>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a>
</p>

</footer>
</article>
</body>
</html>
