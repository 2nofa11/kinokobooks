<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【44】人類に残された、バグを出さない唯一の方法 - ゲームクリエイターが知るべき 97 のこと 2</title>
  <meta property="og:title" content="【44】人類に残された、バグを出さない唯一の方法">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/game297_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/game2/game244.htm">
  <meta property="og:site_name" content="ゲームクリエイターが知るべき 97 のこと 2">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="j44">【44】人類に残された、バグを出さない唯一の方法</h1>
<div class="author">
南治 一徳
</div>
<p>　ノイマン型コンピュータが発明されて以来、人類はずっとバグとの戦いを強いられてきた。当初、意気揚々としてコンピュータを制作した人類だったけれど、コンピュータを動かすためのソフトウェアである「プログラム」を作成していくにつけ、人間のミスが、本来ミスをしないはずのコンピュータを動かすための大きな障害になるとわかってきたからだ。それが「バグ」である。その後、いかにバグが出ないプログラムを作るか、発生したバグと戦うのかに多くの時間を費やすことになっていった。</p>
<p>　もともと完全な存在からはほど遠い人間がプログラムを書いている以上、プログラムには必ずミスが入る。ケアレスミス、ロジックミス、etc、さまざまな人的なミスが簡単にプログラムには潜り込んでいく。これは人間が人間である以上、どうしても避けがたいことだ。かくしてバグは生まれて続けてしまうことになった。</p>
<p>　プログラムを書く人間であるプログラマーはプログラムを書くからこそプログラマーたりえる。しかし、プログラムを書けば書くほど、その行為はプログラムの障害であるバグを生み出すことになる。それでもプログラマーはプログラムを書かずにはいられない。プログラムを書くからこそプログラマーなのだから。この大きな矛盾を背負っている存在がプログラマーなのだ。</p>
<p>　だが、この矛盾点を突きつめていくと、ひとつの解が見えてくる。書けば書くほどバグが生まれるのであれば、プログラムを書かなければいい！ プログラムを書かなければバグは生まれないのだ。もちろん、まったくプログラムを書かないとプログラマーではいられないのだから書かないわけにはいかない。だから、可能な限りプログラムを減らすことになる。</p>
<p>　かくして、プログラム技術の進化の過程でいかにプログラムを書かずに済むか、最低限、書かなければいけない範囲にしても、どうすればよりわかりやすく直感的にミスなく書けるのか研究されていった。アセンブラを直接書いていた時代から、高級言語が生まれ、そしてサブルーチンや、その集まりであるライブラリ、より汎用的な構造化プログラミング、モダンなオブジェクト指向プログラミング、もっと広義で言うならば昨今のゲームエンジンなどなど、名前や形は違えど、どの技術をとってもいかに同じような処理を効率良くまとめるか、言い換えればいかにプログラムを書かずに済むか、という点で志向している方向はまったく同じなのだ。</p>
<p>　これから先の未来、もっとプログラムの技術は進むだろう。そしてプログラマーたちは、その新しい技術も吸収しその先の未来に進んで行くことになる。しかし、どれほど新しい技術が進んでも、どんなに便利になっても、それを人間が行う以上、必ずバグは入り込む。発生してしまう。そのバグとの戦いに望むときプログラムを書かなければバグは生まれないのだということを思い出してほしい。</p>
<p>　いささか抽象的になりすぎてしまったかもしれない。より具体的に言い換えるなら、同じ処理をまとめ、息を吸って吐くように、ソースコードの最適化・効率化を考え続けるということが、良いプログラムを書くための近道で必要なことなのだと覚えておいてほしい。プログラムが少ないということは変化にも強いということであり、日々、仕様が変わってしまうゲームのプログラムにおいて非常に大切な要素でもある。だからプログラムを書く時は常に、どういうふうに記述すればよりプログラムの量を減らせるのか、もしくは書かずに済むのかというシンプルな問いを忘れずに考え続けることが大切になる。</p>
<p>　すなわちそれが人類に残された、バグを出さない唯一の方法なのだから。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/" class="external text" title="https://creativecommons.org/licenses/by/3.0/" rel="nofollow">CC-by-3.0</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="game243.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="game245.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
