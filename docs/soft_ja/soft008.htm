<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【08】すべてのものは、かならずエラーを起こす - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【08】すべてのものは、かならずエラーを起こす">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft008.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e08">【08】すべてのものは、かならずエラーを起こす</h1>
<div class="author">
マイケル・ナイガード
</div>
<p>　ハードウェアはエラーを起こす可能性がありますので、予備を用意しますよね。こうすれば、1 つのハードウェアが壊れても、システム全体を止めないようにすることができます。しかし、ハードウェアが増えていますから、システムの中でどれか 1 つのハードウェアが壊れている時間はかえって長くなります。</p>
<p>　ソフトウェアもエラーを起こす可能性があります。アプリケーションはソフトウェアによってできていますから、エラーを起こすことがあります。モニターを追加すればアプリケーションにエラーが起きたかどうかはわかりますが、モニターもソフトウェアですから、それ自身がエラーを起こすことがあります。</p>
<p>　人間も誤りを犯します。私たちもエラーを起こすのです。ですから、私たちは行動、診断、工程を自動化します。自動化すると、人が関わることによるエラーは減りますが、手数を省いたことによるエラーは増えます。人間よりも多様な状況に対処できる自動化システムはありません。</p>
<p>　そこで、自動化システムにもモニターを追加することになります。しかし、ソフトウェアが増えれば、エラーが起きる場所は増えてしまいます。</p>
<p>　ネットワークはハードウェア、ソフトウェア、非常に長いケーブルから作られています。ですから、ネットワークもエラーを起こす可能性があります。大規模ネットワークでは、それぞれの要素は実用的な目的でも、状態空間としては無限になるため、たとえ動いたとしても予測不能になります。個々の機器が確実に動いたとしても、全体としてはカオス的なふるまいを示すのです。</p>
<p>　エラーの影響を緩和するために何かを導入するたびに、それが新しいエラーを増やしていきます。たとえば、クラスタリングソフトウェアを導入して、障害を起こしたサーバーから稼働サーバーにアプリケーションを移せるようになっても、クラスタの代理機能が異常を起こしたときに「スプリットプレインシンドローム」が発生するという新たなリスクが生まれます。</p>
<p>　スリーマイル島事故が、圧力の異常な上昇を防ぐために開いた加圧器逃し安全弁の故障によって起きたことは忘れてはならないことです。</p>
<p>　システムは確実にエラーを起こすという現実の前で、私たちに一体何ができるのでしょうか。</p>
<p>　まず、システムがさまざまな形でエラーを起こすことを受け入れることです。エラーが起きないという前提に立つと、エラーを吸収、コントロールすることができなくなります。エラーが起きることを受け入れたら、特定のエラーに対するシステムの対応を設計できます。カーエンジニアが、衝突したときに先にくしゃくしゃになって乗っている人を守る衝撃吸収ボディ構造を採るのと同じように、ソフトウェア・アーキテクトはエラーを吸収し、正常な部分を保護するセーフモードを作ることができます。</p>
<p>　セーフモードを作らなければ、予測不能で危険なエラーによって立ち往生することになるでしょう。</p>
</article>
<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>
</footer>
</body>
</html>
