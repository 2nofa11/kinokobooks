<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【65】目の前にあるのはレガシーシステムだという前提で設計せよ - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【65】目の前にあるのはレガシーシステムだという前提で設計せよ">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft065.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e65">【65】目の前にあるのはレガシーシステムだという前提で設計せよ</h1>
<div class="author">
デーブ・アンダーソン
</div>
<p>　たとえ、今あなたが使っているシステムが最新鋭機で、最先端テクノロジーを使って開発していたとしても、明日になればレガシーシステムになります。このことに対する備えが必要です。現在のソフトウェア産業では、非常に速いペースであらゆるものが古くなっていきます。自分のシステムを稼働に持ち込み、たとえ数か月なりとも生き残らせたいと思うなら、いずれメンテナンスデベロッパーにフィックスしてもらわなければならなくなることを認めなければなりません。これは、システムが次の要件を満たさなければならないということです。</p>
<ul>
<li><strong>明確性</strong>：コンポーネントやクラスがどのような役割を果たすのかが明確で なければなりません。</li>
<li><strong>テスト可能性</strong>：システムが簡単にテストできるようでなければなりません。</li>
<li><strong>正確性</strong>：システムの各部分は設計通りに、あるいはあるべき姿で動作しなければなりません。汚いその場しのぎのフィックスは取り除く必要があります。</li>
<li><strong>追跡可能性</strong>：まだコードを見たことがないのに、急遽バグフィックスしなければならなくなった人が、稼働システムを見て、エラーを診断し、フィックスに取りかかれるようでなければなりません。</li>
</ul>
<p>　別のチームがコードベースを開いて、何が起きているのかを探っていくのだということを考えるようにしてください。これは、優れたアーキテクチャーの基本です。必要以上に単純化したり、徹底的にドキュメントしたりする必要はありません。優れた設計は、さまざまな形でそれ自体がドキュメントになります。本番システムのふるまいも設計を伝えるものです。たとえば、依存関係がぐちゃぐちゃでつたが這い回るような感じのアーキテクチャーは、本番システムでも檻に入れられた動物のような挙動を示すものです。エラーをデバッグしなければならない、おそらくあなたより若いデペロッパーのことを思いやるようにしてください。</p>
<p>　レガシーは、ソフトウェアの世界では悪い意味を持つ言葉ですが、実際には、すべてのソフトウェアシステムがレガシーと形容されるべきものです。これは、決して悪いことではありません。あなたのシステムが耐久性を持ち、顧客の期待を満足させ、ビジネス上の価値を提供しているということなのです。レガシーと呼ばれたことのないソフトウェアシステムは、おそらく稼働に移される前に封印されたのです。それはアーキテクチャーの成功とはとても言えないでしょう。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft064.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="soft066.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
