<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【75】設計するならコーディングできなければならない - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【75】設計するならコーディングできなければならない">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft075.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e75">【75】設計するならコーディングできなければならない</h1>
<div class="author">
マイク・ブラウン
</div>
<p>　アーキテクチャーでは、目の前の問題をエレガントに解決してくれる凝った設計や抽象化を作りたくなるものです。プロジェクトに新しいテクノロジーをちりばめたいという気持ちは、さらに抑え難いでしょう。しかし、最後は誰かがあなたの設計を実装しなければなりません。アクロバティックなアーキテクチャは、プロジェクトに影響を与えます。</p>
<p>　アーキテクチャーを設計するときには、設計の個々の要素を実装するために必要な作業量がどのくらいになるか、見当が付いていなければなりません。それらの要素を開発したことがあるなら、必要な作業量の見積もりは大幅に楽になるでしょう。</p>
<p>　設計の中で、自分では実装したことのないパターンを使うのは避けましょう。また、使ったことのないフレームワークに頼るのもよくありません。あなた自身が使ったことのない設計要素がアーキテクチャーで必要とされている場合、次のような困った副作用が発生します。</p>
<ul>
<li>デベロッパーたちが直面する学習の苦しさをあなたが経験しない。新しいテクノロジーを修得するのにどれだけの時間がかかるのかを知らなければ、実装にかかる時間を見積もることはできないでしょう。</li>
<li>それを使うときに避けなければならない落とし穴がわからなくなる。そのテクノロジーの訓練を受けたエキスパートがやって見せたデモと同じようには、作業は進みません。そのテクノロジーがあなたの使ったことのないものなら、落とし穴にはまったときに戸惑ってしまいます。</li>
<li>デベロッパーたちからの信頼を失う。彼らが設計について質問してきたときに、はっきりとした答えを返せないようなら、彼らはあなたと設計に対して急速に不信感を持つようになるでしょう。</li>
<li>不必要なリスクを持ち込んでしまう。使っているテクノロジーがわからなければ、ソリューションの重要な要素に大きな疑問符が付きます。余分な大きいリスクを抱えたプロジェクトに取りかかろうと思う人はいません。</li>
</ul>
<p>　では、新しいフレームワーク、パターン、サーバー・プラットフォームの学習にはどのようにして取り組めばよいのでしょうか。これは、独立したもう1つの格言になります。「アーキテクトは何よりもまずデベロッパーであれ」（【63】を参照）。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft074.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="soft076.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
