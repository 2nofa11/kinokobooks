<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【11】説明責任を果たす - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【11】説明責任を果たす">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft111.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="j11">【11】説明責任を果たす</h1>
<div class="author">
萩本順三
</div>
<p>　複雑怪奇なソフトウェアを、システムに課せられる要件をクリアしつつ、わかりやすくシンプルに構築することはソフトウェア・アーキテクトとしての課題です。そのためには、タイトルに上げた説明責任を果たすことが重要です。</p>
<p>　この説明責任とは、たとえば開発者に対する責任です。しっかりとソフトウェア・アーキテクチャを設計し、そのコンセプトとデザインを的確に開発者に伝えなければなりません。その為には、アーキテクチャの説明書を書く際にも、誰に向けて書いているかを意識しなければなりません。たとえばドメインフレームワーク的なアーキテクチャを設計し自ら作成をする場合は、そのフレームワークを利用する開発者にわかりやすい利用説明書とチュートリアルを作りましょう。また、とにかくお手本となる利用するソースコードを示して一緒にプログラムすることも有用です。</p>
<p>　アーキテクチャについて、詳しいドキュメントを書いていながらも、利用してもらおうという意識が少ないものが多いように思います。理解し利用してもらうためには、工夫が必要となります。それは、最初の取りかかりの敷居を低くするために、シンプルでわかりやすい利用例を載せることです。また、ソフトウェア保守の局面で必要とされるドキュメントについては、アーキテクチャを保守の観点で仕組みの部分も含めて説明しなければなりません。</p>
<p>　開発中に保守ドキュメントの観点で、大量のアーキテクチャ・ドキュメントを書く人（プロジェクト）を見かけます。そのようなケースは、開発中にデザインが大きく変わった段階からドキュメントのメンテに追われ、挙げ句の果てには、開発したものとは異なるドキュメントになってしまいます。</p>
<p>　このような問題もあるため、開発中に必要とされるアーキテクチャ・ドキュメントと開発後の保守で使われるアーキテクチャ・ドキュメントは明確に分けて、作成することをプロジェクトで考えてみましょう。開発中のドキュメントは必要最低限にしつつ、しっかりと説明責任を果たすことが重要です。このことは、ソフトウェア・システムのオーナーにもしっかりと説明し、開発中のドキュメントと保守ドキュメントを明確に区別することが重要となります。</p>
<p>　また、開発関係者への説明だけではなく、技術者以外の人にも、ソフトウェア・システムのコンセプトを分かりやすい比ゆ（抽象的な図など）を使って表し説明できる能力を持てば、ソフトウェア・アーキテクトの価値は高まります。例えば、スポンサー、ユーザーにもソフトウェア・システムの有用性を含めてアーキテクチャを分かりやすく説明できる能力を持ちましょう。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft110.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">インデックス</a></li>
<li class="next-article"><span class="disable">次のエッセイ &gt;</span></li>
</ul>
</nav>
</footer>
</body>
</html>
