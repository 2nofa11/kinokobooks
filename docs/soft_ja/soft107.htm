<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【07】開発スタイルをデザインする - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【07】開発スタイルをデザインする">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft107.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="j07">【07】開発スタイルをデザインする</h1>
<div class="author">
小野和俊
</div>
<p>　ソフトウェアをつくりあげるために、どのようなテクノロジーを用い、どのようなアーキテクチャでシステムを構成するのかを決めていくことはとても大切なことです。それと同じくらい大切なこととして、「どのように開発するか」という開発のスタイルをデザインしていくことを忘れてはいけません。ここでいう開発のスタイルとは、例えばエクストリーム・プログラミングで示されている、ペア・プログラミングやテスト・ファーストのようなプラクティスなどのことです。</p>
<p>　テクノロジーやアーキテクチャにどのようなものを選択するかによって、ソフトウェアがユーザーにもたらす体験が変化し、ソフトウェアの開発に要する作業の内容も大きく変わってきます。開発スタイルの選択によって変化するのは、要求が変化することへの対応の柔軟性やバグの発生確率、職場の雰囲気、参加メンバーの納得感などです。</p>
<p>　開発スタイルのデザインには、原則は存在しますが、絶対にこうしなければならない、という類の規則は存在しません。例えば、特定の顧客向けに開発するシステムで、顧客のイメージがある程度固まっているようなプロジェクトでは、テスト・ファーストは絶大な威力を発揮するでしょう。しかし、自分たちでウェブのサービスを新規に立ち上げようと考えていて、イメージがほとんど固まっていない状態からつくりながら考えていく、というプロジェクトでは、テスト・ファーストを採用してしまうと、作成したテストの多くが無駄になってしまうこともあるでしょう。同じ開発プロジェクトの中でも、フェーズによって採用すべき開発スタイルが常に同じものになるとは限りません。</p>
<p>　選択するテクノロジーによって、開発スタイルのデザインが変わってくる場合もあります。まだ使い慣れていないメンバーが多いテクノロジーを採用する場合には、初期の段階でのペア・プログラミングは、教育的な意味でも大きな効果を期待できます。一方で、メンバー全員がすでに習熟している技術を選択する場合には、ペア・プログラミングではなく、個々に開発を進めて、コミット・レビューの際に互いのコードを確認する、というスタイルの方が効率が良いこともあります。</p>
<p>　アーキテクトには、プロジェクトがどのような特性を持ったメンバーで構成され、どのような開発スタイルで進んでいくのかを意識しながらアーキテクチャを設計することが期待されます。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft106.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">インデックス</a></li>
<li class="next-article"><a href="soft108.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
