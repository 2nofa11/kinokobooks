<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【59】趣味や個人的な意見ではなく、原理原則に従え - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【59】趣味や個人的な意見ではなく、原理原則に従え | ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft059.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e59">【59】趣味や個人的な意見ではなく、原理原則に従え</h1>
<div class="author">
マイケル・ハーマー
</div>
<p>　アーキテクチャーを設計するときには、その導きの糸として、原理原則に明確に従うようにすべきです。そうすれば、単に自分の経験、意見、趣味でシステムを作ったときよりもメリットが得られます。</p>
<p>　まず、アーキテクチャーのドキュメントが簡単になります。どのような原則に従ったかを書くところからスタートできます。あなたの意見や経験を説明するよりもずっと楽です。原理原則は、アーキテクチャーを理解し、実装するデベロッパーたちに、手がかりを与えることもできます。あなたのアーキテクチャーを引き継ぐアーキテクトがあまり経験をつんでいなくても、原理原則がはっきりしていれば何かと便利です。</p>
<p>　明確な原則を持つアーキテクチャーは、何から何まで面倒を見ることからアーキテクトを解放します。レバレッジや影響が大きくなるのです。全能のワーカホリックとしてチームメンバーの次のような仕事をいちいち監督する必要はなくなります。</p>
<ul>
<li>アーキテクチャーの実装、修正</li>
<li>関連ドメインへのアーキテクチャーの拡張</li>
<li>新しいテクノロジーを使ったアーキテクチャーの再実装</li>
<li>境界条件の細かいチェック</li>
</ul>
<p>　見解や趣味の違いは、権威のある方が勝つ政治的な議論を引き起こします。しかし、基本原則が明確になっているところで意見が違う場合には、個人の人格をかけた争いにはならず、理性的に議論を進めることができます。また、アーキテクトが立ち会わなくても、意見の相違を解決できます。</p>
<p>　原理原則に従えば、実装全体を通じて、また時間を越えて一貫性の取れたアーキテクチャーが得られます。複数のテクノロジーを使い、何年も使われる大規模なシステムでは、特に一貫性がよく問題になります。明確な原則に従ってアーキテクチャーを設計すれば、特定のテクノロジーやコンポーネントをよく知らない人々でも、その知らない部分を早く理解できます。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft058.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="soft060.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
