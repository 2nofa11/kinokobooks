<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【60】動くスケルトンから始めよう - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【60】動くスケルトンから始めよう | ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft060.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e60">【60】動くスケルトンから始めよう</h1>
<div class="author">
クリント・シャンク
</div>
<p>　アリスター・コーバーンが「動くスケルトン」と呼んでいるものを出発点にすると、アーキテクチャーを実装、検査し、発展させていくための優れた戦略となります。動くスケルトンとは、アーキテクチャー上重要なコンポーネントをすべてリンクした最小限の完結した実装です。すべての通信路を備えた小さなシステムからスタートすれば、正しい方向に向かっているという自信が得られます。</p>
<p>　スケルトンを作ったら、筋力養成プログラムを開始します。全身運動で身体を鍛えていくのです。これは、完結性を維持したまま新しい機能を少しずつ追加していくということです。目標は、スケルトンを成長させながら、システムを動かし続けることです。</p>
<p>　アーキテクチャーが作られてから時間がたち、大きくなればなるほど、アーキテクチャーに変更を加えるのは難しく、コストのかかる仕事になっていきます。ですから、誤りは早い段階で見つけておきたいのです。動くスケルトン方式なら、フィードバックサイクルが短くなります。サイクルが短ければ、素早く適応し、同じ部分に繰り返し修正を加えることができます。顧客が優先的に必要とする品質性能は、自分でシステムを動かしてみなければわからないものですが、そのような品質を確保するためには、このような繰り返し作業が必要不可欠なのです。アーキテクチャーに含まれる暗黙の前提も、早い段階でチェックできます。実装にあまり時間をかけていない段階で問題点が見つかるので、アーキテクチャーを拡張していくのも簡単になります。</p>
<p>　システムが大きくなればなるほど、この戦略は重要になってきます。小さなアプリケーションであれば、上から下まですべての機能を 1 人のデベロッパーが実装していけますが、大規模なシステムではそういうわけにはいきません。1 つの完結した実装のために、複数のデベロッパーで 1 つのチームを組むのはもちろん、複数の分散化されたチームを組むことさえごく普通にあります。人数が増えれば、デベロッパー間での調整作業も増えます。そして当然ながら、デベロッパーによって実装のペースが違います。短い時間に多くの仕事をこなせるデベロッパーもいれば、時間をかけてもごくわずかしか実装できないデベロッパーもいます。時間がかかる難しい仕事は、プロジェクトの初期の段階で済ませておかなければなりません。</p>
<p>　動くスケルトンからスタートし、動く状態を保ちながら、それを少しずつ育てていくのがコツです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft059.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="soft061.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
