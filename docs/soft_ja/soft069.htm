<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【69】今の近道、後で大損 - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【69】今の近道、後で大損">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft069.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e69">【69】今の近道、後で大損</h1>
<div class="author">
スコット・マクフィー
</div>
<p>　アーキテクチャーを設計するときには、最初の開発段階よりもメンテナンスに入ってからの方が多くのリソースを消費するということを忘れてはなりません。プロジェクトの初期開発段階で近道を選んでしまうと、後でメンテナンスにばかばかしいコストがかかることがあります。</p>
<p>　たとえば、単体テストでは直接的な価値が得られないからと、デベロッパーたちに単体テストの適用を省略してよいと言ったとします。このようにして作られたシステムは、後で変更するのがとても難しくなりますし、変更を加えたときにそれでよかったのかどうか確信が持てません。わずかな変更のために手作業によるテストが必要になるため、システムがもろくなって、メンテナンスにコストがかかります。設計自体としても、完全にテストできる設計（テストファースト設計はもちろん）と比べてよいものにはなりません。</p>
<p>　既存のシステムの活用はコスト軽減につながるからといって、適合しない目的のために既存システムをむりやり使うのは、アーキテクチャー上の誤りとしても特に深刻です。たとえば、アーキテクチャーのコンポーネントとして BPEL とデータベーストリガーを使って非同期メッセージングシステムを実現しようとしていたとします。便利だからとか、あなたやクライアントが知っているアーキテクチャーだからというので、そういう案になったのかもしれませんが、要件によってメッセージングがコンポーネントとして必要だということがはっきりしたら、ただちにメッセージングアーキテクチャーを選択すべきだったのです。プロジェクトの最初の段階で、誤った判断をすると、新しい要件に合わせてシステムのアーキテクチャーを作り直すときのコストが大幅に増えてしまいます。</p>
<p>　初期開発段階で近道を避けるだけでなく、設計のまずい部分を見つけたときにはできる限り早く修正するのも大切なことです。設計のまずい部分が将来の機能の基礎になる場合もあります。そのような場合、後で正しい動作をするように修正しようとすると、余分なコストがかかります。</p>
<p>　たとえば、基礎的な機能のために不適切なライブラリが選択されていることに気付いた場合、そのライブラリはできる限り早く置き換えなければなりません。そうしないと、要件の発展とともに、以前のレイヤーのまずい部分を隠すために、後で余分な抽象化レイヤーを追加しなければならなくなる場合があります。これではもつれあった糸と粘着テープでボールを作っているようなもので、レイヤーを追加するたびに、もつれあったものをほどくのが難しくなっていきます。これでは、システムが変更しにくくなってしまいます。</p>
<p>　あなたはアーキテクトとして、アーキテクチャー上の問題点やデザインの欠点を見つけたときには、コストのかからない今の段階で修正することを主張すべきです。放置したままの状態が長引けば長引くほど、そのために支払わなければならない利子は増えます。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
</footer>
</body>
</html>
