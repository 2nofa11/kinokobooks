<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【48】支配せず、観察せよ - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【48】支配せず、観察せよ">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft048.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e48">【48】支配せず、観察せよ</h1>
<div class="author">
グレガー・ホープ
</div>
<p>　今日のシステムは分散化され、疎結合になっています。疎結合のシステムを作るのは少し大変な仕事になります。なぜわざわざそんなことをするのでしょうか。それは、システムを柔軟にして、少々の変更で空中分解するようなことのないようにしたいからです。これは、今日の環境で特に重要なポイントです。今日の環境では、私たちはアプリケーションのごく一部しかコントロールできません。他の部分は、分散サービスとかサードパーティーパッケージという形で、他の部門や社外のベンダーによってコントロールされているのです。</p>
<p>　それなら、柔軟性が高く、時間とともに発展するようなシステムを作ればいいような感じがします。しかし、そうするとシステムが時間とともに変わることにもなります。「今日のシステムは昨日のシステムではない」というようなことになると、システムのドキュメントを作るのがとても難しくなります。ドキュメントは、印刷される頃には古くなっていることがよくありますが、始終変わるようなシステムでは、それどころの騒ぎではありません。</p>
<p>　また、柔軟性の高いシステムを作ろうとすると、通常はアーキテクチャーがより複雑になり、定石に従って「大きな絵」をつかむのが難しくなります。たとえば、すべてのシステムコンポーネントが設定可能な論理チャネルを介して通信する場合、何が起きているのかをより完全に把握したければ、チャネルのコンフィギュレーションを覗いてみなければなりません。よくわからないままに論理チャネルにメッセージを送り込んでも、コンパイルエラーは起きないでしょうが、メッセージにカプセル化されたユーザーの意思は伝わらず、ユーザーをがっかりさせることになるでしょう。</p>
<p>　何かと支配したがるアーキテクトは、時代遅れで、密結合のもろいソリューションを作ってしまいますが、逆に、ソフトウェアに無制限に動き回られたのでは、間違いなくカオスになります。計器なしで計器飛行するようなことを避けるために、コントロールの欠如を他の何かで補わなければなりません。</p>
<p>　しかし、一体どのような計器があるというのでしょうか。実は、結構あるのです。今日のプログラミング言語はリフレクションをサポートしていますし、ほとんどすべてのランタイム環境はランタイム統計を提供しています。システムのコンフィギュレーションの幅が広がれば、現在のシステム・コンフィギュレーションが大きな情報源になります。</p>
<p>　大量の生データを理解するのは大変ですから、そこからモデルを抽出します。たとえば、どのコンポーネントがどの論理チャネルにメッセージを送っているかがわかり、どのコンポーネントがチャネルをリッスンしているかがわかったら、コンポーネント間で実際に行われている通信のグラフモデルを作ることができます。数分あるいは数時間ごとにこれを行えば、最新の正確なシステムのイメージが得られます。これは「リバース MDA」と考えることができるでしょう。モデルにアーキテクチャーを駆動させるのではなく、柔軟性の高いアーキテクチャーを作り、実際のシステムの状態からモデルを抽出するのです。</p>
<p>　このモデルは簡単に視覚化することができ、そうすると文字通りの「大きな絵」が作れます。しかし、システムのすべてのクラスを含む 3 × 5m のボックスと矢印の巨大ボードを作るのはやめた方がよいでしょう。コンテンポラリー・アートとしては通用するかもしれませんが、ソフトウェアモデルとしては役に立ちません。</p>
<p>　それよりも、エリック・ドーネンバーグが言うように（※【29】参照）、実際にシステムについての理解が得られる地上 300m からの視点を持つようにすべきです。その上で、依存グラフに循環的な依存関係が含まれていないか、誰もリッスンしていない論理チャネルに送られているメッセージはないかといった基本ルールに従うように、モデルに手を入れるのです。</p>
<p>　システム・アーキテクチャーという話でも、まったくコントロールなしというわけにはいかないでしょう。観察、モデル抽出、整合性チェックといった方法で完全なコントロールがあり得なくなった状態を補うことこそ、21 世紀のアーキテクトが進むべき唯一の道だと思います。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft047.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="soft049.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
