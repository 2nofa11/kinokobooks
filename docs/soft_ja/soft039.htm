<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【39】未来はヘテロジニアスとともにある - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【39】未来はヘテロジニアスとともにある">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft039.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e39">【39】未来はヘテロジニアスとともにある</h1>
<div class="author">
エドワード・ガーソン
</div>
<p>　コンピューター・テクノロジーの自然な発展とともに、アーキテクトがソフトウェア・システムを構築するために使うツールに重要な変化が生まれてきています。それは、多言語プログラミングに対する関心の復活です。多言語プログラミングとは、文字通り、ソフトウェア・システムの中で複数のコア言語を使うことです。</p>
<p>　多言語プログラミングは、決して新しいコンセプトではありません。過去の非常に目立った例としては、フロントエンドが Visual Basic クライアント、バックエンドが C++ で書かれた COM オブジェクトというシステムがあります。このアーキテクチャーは、これらの言語が全製品に得意としていた分野をうまく活用したものでした。</p>
<p>　では、このような多言語プログラミングに対して新たな関心が沸き起こってきたのは、どのような変化からなのでしょうか。</p>
<p>　それは、ネットワーク帯域幅の拡大とコンピューティング・リソースの強化により、テキストベースのプロトコルが現実的な選択になったことです。効率のよい分散システムのためには難解なバイナリプロトコルが必須と考えられていた時代は終わったのです。テキストベースによるリモートの相互運用性は、XML/SOAP ベースのウェブサービスに始まり、RESTful なアーキテクチャーと Atom、XMPP などのサポート（と言っても重要性では決して引けを取らない）プロトコルまで発展してきました。</p>
<p>　こうした新しいタイプのテクノロジーは、データが普遍的に生成、利用できる整形済みテキストになっているために、ヘテロジニアスな（異種、異質のツールを併用する）開発に今までにない大きなチャンスを与えました。ヘテロジニアスな開発なら、仕事にあった適切なツールを使うというぜいたくが許されます。テキストベースの相互運用性は、以前のような垣根を吹き飛ばしました。</p>
<p>　今のアーキテクトは、専用の強力なツールを組み合わせて使うことができます。そのため、ツールを選ぶ基準が、正しい言語を使えるかどうかから、正しいパラダイムを使えるかどうかに変わってきました。プログラミング言語は、オブジェクト指向、関数型など異なるパラダイムをサポートしています。並行プログラミングに特に優れているというようなものもあります。パラダイムの中には、特定の問題、ドメインにぴったり合うものもあれば、そうでないものもあります。しかし、以前と比べれば、一見相性の悪そうな特殊なツールを「マッシュアップ」してエレガントなソリューションを生み出すことがずっと容易になっているという側面もあります。</p>
<p>　このような変化の影響が少しずつ現れてきており、最近のソフトウェア・システムは、アーキテクチャー・トポロジーの組み合わせがバラエティに富んだものになってきています。これは、システムの本質的な多様性を反映しているだけではなく、新しい可能性が生まれてきていることを証明しているのです。</p>
<p>　選択肢があるのは必ずしもよいことではありませんが、今のソフトウェア・アーキテクチャーの状況では、選択がないよりはある方が「まし」です。ソフトウェア産業は非常に深刻な問題に直面しています。特に既存のプラットフォームがそれらの問題をうまく解決できていないことを考えると、できる限り相互運用性を確保しておかなければなりません。</p>
<p>　新しい可能性の前で技術を細分化する壁が崩れつつある現在、アーキテクトとしての仕事は以前よりもさらに困難なものになっています。しかし、これをポジティブにとらえ、これまでの積み重ねを忘れて考えるようにしましょう。そして、新しい多様性を活用するのです。未来は、ヘテロジニアスシステムとともにあります。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft038.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="soft040.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
