<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【58】3 つから 2 つだけを選ぶ覚悟を決めよ - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【58】3 つから 2 つだけを選ぶ覚悟を決めよ | ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft058.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e58">【58】3 つから 2 つだけを選ぶ覚悟を決めよ</h1>
<div class="author">
ビル・デオーラ
</div>
<p>　制約を受け入れたり、性質の 1 つに見切りを付けたりすると、かえって構築、実行が楽でコストもかからない優れたアーキテクチャーになることがあります。バスと同じように、いいなと思う性質は 3 つ固まってやってきますが、これら 3 つをサポートすることを意図して定義、構築したシステムは、どれについても思わしい成果を残せないものになってしまうのです。</p>
<p>　そのよい例がブリュワーの予測、あるいは CAP 定理です。分散システムで望ましいとされている性質は、データ整合性（Consistency）、システム可用性（Availability）、ネットワークの分断（Partition）の 3 つですが、3 つ全部を同時に達成することは難しいというのです。3 つをすべて満足させようとすると、途端にコストが上がり、複雑になるにもかかわらず、ビジネス上の目標や望ましい効果は得られません。</p>
<p>　たとえば、データを分散化して可用性を高めようとしたシステムにおいて、さらに整合性も求めようとすると、コストが跳ね上がり、結局整合性は得られなくなります。同様に、システムに分散化と整合性が必要な場合、整合性を確保しようとすると、最初のうちは遅延やパフォーマンス上の問題が起きます。その後も、整合性を保つためにシステムを公開するわけにいかなくなり、結局可用性は得られません。</p>
<p>　アーキテクチャーを設計するときには、どうしても譲れない性質が 1 つ、あるいはいくつか出てくることがよくあります。データを重複して持つことはできない、書き込みはかならずトランザクションによって行わなければならない、100% の可用性がなければならない、呼び出しは非同期的でなければならない、単一障害点があってはならない、すべての部分に拡張性がなければならない、といったものです。</p>
<p>　だまされやすい素朴な考え方はやめて、これらの題目を迷信と思えば、目の前の問題に振り回されることはなくなります。原則に基づいた設計にしがみつくのではなく、アーキテクチャーにわざと偏りを与えることを考えるのです。教条主義と管理をはき違えてはなりません。なぜ、その性質が必要なのかを、本気で考えなければなりません。その性質があるとどのようなメリットがあるのか、その性質が欲しくなるのはどのようなときか、より良い結果を得るためにシステムをどのように分割するか。アーキテクチャーにドグマが紛れ込むと、結局システムを損ねることになりますので、あらゆることを疑わなければなりません。</p>
<p>　このようなトレードオフが避けられないという事実を受け入れるのは、アーキテクトに限らず、デベロッパーやその他の利害関係者にとっても、ソフトウェア開発においてもっとも難しいことの 1 つです。しかし、必要なものを選ぶことは大切です。その方が、無限の選択肢を残しておくよりもはるかによい結果が得られます。トレードオフを受け入れれば、創意に満ちたすばらしいシステムを手に入れられる場合もよくあります。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft057.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="soft059.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
