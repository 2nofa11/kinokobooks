<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【38】摩天楼はスケーラブルではない - ソフトウェアアーキテクトが知るべき 97 のこと</title>
  <meta property="og:title" content="【38】摩天楼はスケーラブルではない | ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_ja/soft038.htm">
  <meta property="og:site_name" content="ソフトウェアアーキテクトが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e38">【38】摩天楼はスケーラブルではない<span id="color-scheme"></span></h1>
<div class="author">
マイケル・ナイガード
</div>
<p>　ソフトウェア工学を高層ビル、ダム、道路などの建設にたとえる話をよく耳にします。確かに、重要な側面でこの比喩は当たっています。</p>
<p>　建設でもっとも難しいのは、完成後に倒れずに立っているビルを設計することではなく、建設プロセスを設計することです。建設プロセスとは、更地からビルの完成に至るまでの過程です。その間、未完成の構築物をすっと立たせておきつつ、すべての作業者がそれぞれの仕事をできるようにしておかなければなりません。大規模な統合システムのデプロイについては、ここから学べることがあります（ほぼすべてのエンタープライズ・アプリケーションとウェブアプリケーションには「統合」が含まれます）。伝統的な「ビッグバン」的デプロイは、梁や桁を積み上げて空中に放り投げれば、それらがくっついてビルの形になると思うようなものです。</p>
<p>　そのようなやり方ではなく、1 度に 1 コンポーネントずつデプロイするようなプランを立てなければなりません。システム再構築か新規開発かによって、この方法には 2 つの大きなメリットがあります。</p>
<p>　まず第 1 に、ソフトウェアをデプロイするということは、コードに蓄積されている技術的なリスクにシステムをさらすということです。1 度に 1 コンポーネントずつデプロイすれば、技術的なリスクを時間的に分散させることができます。すべてのコンポーネントは稼働しているシステムに対して独自のエラーを起こす危険性を秘めていますが、1 つずつデプロイしていけば、それらのエラーは他のエラーと重ならず、独立に起きる確率が高くなります。</p>
<p>　第 2 のメリットは、1 つずつデプロイすると、否応なく、コンポーネントの間のインターフェイスを明確に定義しなければならなくなることです。新しいシステムの 1 つのコンポーネントをデプロイするということは、逆に言えば古いシステムに統合していくということです。そのため、デプロイが完了する頃には、1 つ 1 つのコンポーネントが新旧両方のシステムで動作するようになります。コンポーネントは、実際に再利用されるまで、再利用可能だとは言えません。そのため、1 つずつのデプロイは、自動的に再利用可能性を高めていくのです。実際に、システムの一貫性が高まり、疎結合化が進みます。</p>
<p>　逆に、建設の比喩が重要な側面で誤解を招くこともあります。特に、実世界の具体的なイメージは、ウォーターフォール・モデルが正しいと感じる傾向を生みやすいという問題があります。どこに、どのくらいの高さでビルを建てるかを考えずに高層ビルを建てる人はいません。既存のビルに階を追加するようなことは、コストがかかり危険なので誰も考えません。このように、高層ビルは、1 度設計してしまったら、位置や高さが変わることはありません、摩天楼はスケーラブルではないのです。</p>
<p>　道路に車線を追加するのは容易ではありませんが、ソフトウェアに機能を追加するのは簡単です。これはソフトウェアプロセスの欠点ではなく、私たちのメディアの長所です。ごくわずかな機能しか持たないアプリケーションでも、ユーザーがお金を払ってもよいと思うだけの価値があれば、リリースしてまったくかまいません。実際、アプリケーションをリリースするのが早ければ早いほど、全体としての純現在価値（NPV）は高くなります。</p>
<p>　「早期リリース」と「段階的デプロイ」は競合するように見えるかもしれませんが、実際には非常に相性よく共存します。個々のコンポーネントを早期リリースするということは、個々のコンポーネントに独立のイテレーションを与えられるということです。このやり方のもとでは、デプロイ中の継続的な可用性の保証とか、プロトコルのバージョン管理のようなやっかいな問題を否応なくクリアしていかなければなりません。</p>
<p>　商業的に高い価値とアーキテクチャーとしての品質の高さを同時に提供するテクニックはあまりありませんが、コンポーネント単位での早期デプロイは、両方をもたらしてくれるのです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>

<div>
    <a class="sns-button" href="https://twitter.com/share?url=https://yoshi389111.github.io/kinokobooks/soft_ja/soft038.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/twitter.svg"></a>
    <a class="sns-button" href="https://www.facebook.com/share.php?u=https://yoshi389111.github.io/kinokobooks/soft_ja/soft038.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/facebook.svg"></a>
    <a class="sns-button" href="https://b.hatena.ne.jp/add?mode=confirm&url=https://yoshi389111.github.io/kinokobooks/soft_ja/soft038.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/hatebu.svg"></a>
    <a class="sns-button" href="https://getpocket.com/edit?url=https://yoshi389111.github.io/kinokobooks/soft_ja/soft038.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/pocket.svg"></a>
</div>

<nav>
<ul class="nav-links">
<li class="prev-article"><a href="soft037.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="soft039.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
