<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<title>Keep It Simple, Simon - Project Manager 97Things</title>
<meta property="og:title" content="Keep It Simple, Simon">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_en/Keep_It_Simple_Simon.htm">
<meta property="og:site_name" content="97 Things Every Project Manager Should Know.">
<meta property="og:locale" content="en_US">
<script type="text/javascript" src="../js/darkmode.js"></script>
</head>
<body>
<article>
<header>
<h1>Keep It Simple, Simon</h1>

<p><b>Krishna Kadali, M. Tech</b>
<i>Kondapur, Hyderabad, India</i></p>
</header>

<p>Stakeholders of the project often make things more complicated than they need to be. This a common cause of software project failures. The team members of the project must have the ability to completely visualize the objectives of the project and complete actual work. Stakeholders, however, can accomplish the project in several simple, magical steps in their own minds.  They imagine achieving the end solution quickly and easily, no matter how complex it is.
</p><p>Stakeholders should not build a software project as a monolithic, gigantic, inflexible monster; instead they should allow the Information Technology (IT) team to build it like an onion with each layer enhancing its maturity. There is no other alternative in the world of reality. Regardless of the completeness of the requirements, there will always be change. If your software is not flexible enough to quickly adapt to changing requirements, the project is dead even before it has begun. 
</p><p>To keep things simple, following are the key points that need to be kept in mind:
</p>
<ul>
<li><p><b>Keep the requirements simple.</b> The business analysts often confuse a particular solution that came to their mind with the actual customer requirement based on a business need. Although the real requirement may be something very simple, there may be a communications gap between business analysts and programmer/developers since they don't really understand what each other do. 
</p><p>Business analysts should write requirements using a simple tree-based imagery. The root requirement is the simple objective of the overall project. Small twig sets of child level requirements are grouped together to form a branch representing a parent level requirement. This process repeated on the diagram until each requirement is crystal clear. Software mind mapping tools could be used to document the requirements using this approach. Once even a small set of requirements are crystallized, development can begin.
</p></li>
<li><p><b>Follow agile development processes.</b> As soon as a small set of requirements are identified, the development team can start prototyping immediately. Once the prototype is available, stakeholders can test and provide feedback. Customer feedback ensures that requirements are accurate and also helps identify any gaps that developed in the requirements as they were relayed from the actual customer through the business analysts to the project team.  Allowing the customer to see the prototype also checks that the corresponding solution imagined by the developers is, indeed, what the customer envisioned.
</p><p>Gaps are translated into new requirements, developers re-prototype, and the cycle continues. Each cycle should be as short as possible, typically not more than 2 to 3 weeks. 
</p><p>This cycle of defining a small set of requirements, producing a prototype of the stated requirements, and obtaining feedback, ensures that all stakeholders of the project are always on the same page and everyone is comfortable about what is going on. By religiously following these simple techniques every software project can reach a successful conclusion. Especially if success is defined as a happy customer and working software that provides the useful business function for which it was created.
</p></li>
</ul>

<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

