<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<title>Scope Change Happens; Get Used to It - Project Manager 97Things</title>
<meta property="og:title" content="Scope Change Happens; Get Used to It">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_en/Immortality_of_scope_changes.htm">
<meta property="og:site_name" content="97 Things Every Project Manager Should Know.">
<meta property="og:locale" content="en_US">

</head>
<body>
<article>
<header>
<h1>Scope Change Happens; Get Used to It</h1>

<p><b>Pavel Simsa, PMP</b>
<i>Bellevue, Washington, USA</i></p>
</header>

<p>If there is one thing that distinguishes a software development project from other project types, it is how, inevitably, scope changes occur. Not that it never happens in other places, but I can't think of another industry with such a constantly fluctuating scope.
</p><p>You know projects are governed by the triple constraint: cost, time and scope.
</p><p><b>Cost</b>. If your project is in trouble, throwing in extra money or resources rarely helps. If you double the number of diggers, you'll probably get your trench dug in just slightly more than half the time. But if you double the number of software developers, hoping to get the project back on track, it will probably do more harm than good. You will create huge confusion over who owns what code and how things need to be done. So cost needs to stay the same.
</p><p><b>Time</b>. There's always &#x201c;The Date.&#x201d; It is not the delivery date indicated in your original schedule. Nobody officially mentions it out loud, but if you are developing a big security product that is scheduled to release in November, there is a likely chance you will get to keep your job even if your delivery slips until January. Secretly, the team knows &#x201c;The Date&#x201d; is February, for example, &#x201c;at the time of the international Black Hat security conference where new releases are announced&#x201d;. You have some flexibility surrounding your delivery time, but only a small amount. Time is constrained.
</p><p><b>Scope</b>. What remains to change is the scope. Oddly enough, scope is one of the most flexible constraints. Especially, when developing commercial software, rather than software built and customized for a specific customer. The reason is simple. Every new software product has &#x201c;must have&#x201d; and &#x201c;nice to have&#x201d; features and functionality. The &#x201c;nice to have&#x201d; features typically outnumber the &#x201c;must have&#x201d; features several times over.
</p><p>Fortunately, the &#x201c;nice to have&#x201d; items are also the easiest to eliminate. If you are building a skyscraper, you can't announce in the middle of the project, &#x201c;In order to get this project back on track, we'll only build 40 stories on this building, rather than the 60 stories the architectural plans show. We can add the other 20 later, when we have the time&#x201d;.
</p><p>With software, it's relatively easy to say, &#x201c;Change of plans - we'll support only two operating systems in Release One. Later, we can add the other two we originally planned to support&#x201d;,
</p><p>It's not an ideal solution, so what can be done to avoid it? Honestly speaking, probably nothing. It's the nature of software development projects. However, what you can do is to plan your scope concretely. Identify the &#x201c;nice to have&#x201d; features and their dependencies from the beginning. The dependencies are important. Removing a &#x201c;nice to have&#x201d; feature may otherwise also change the development architectures linked to a &#x201c;must have.&#x201d;
</p><p>If you plan possible scope reductions from the beginning, it will make your decision about what to cut and how to cut it easier, should it become necessary.
</p>

<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

