<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<title>Get Users Involved As Early As Possible - Project Manager 97Things</title>
<meta property="og:title" content="Get Users Involved As Early As Possible">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_en/Get_Users_Involved_As_Early_As_Possible.htm">
<meta property="og:site_name" content="97 Things Every Project Manager Should Know.">
<meta property="og:locale" content="en_US">

</head>
<body>
<article>
<header>
<h1>Get Users Involved As Early As Possible</h1>

<p><b>Barbee Davis, M.A., PHR, PMP</b>
<i>Omaha, Nebraska, USA</i></p>
</header>

<p>Past patterns of software development involved getting user requirements and then going off to do the coding and testing under a veil of great secrecy. After all, the users wouldn't understand what we were doing anyway, right? At the end of the project, our magician's magic cloth was whisked away and the user was expected to &#x201c;ooh&#x201d; and &#x201c;aww&#x201d; at the brilliance of what we had produced. However, all too frequently their reaction was, &#x201c;Well, I know you went to a lot of work, but what I really wanted was&#x2026;..&#x201d;
</p><p>Today, the secret to project success is to involve the user almost as soon as there is anything visible to show them. How much better it is to find out that there are problems with what we are developing early on, rather than after the project is complete. 
</p><p>Costs for changes becomes increasingly high the further along we are on the project schedule timeline. The time to recode, retest, and rework the immediate software, as well as to test integration with all the peripheral code involved, can delay the project substantially. And both time and cost baselines are jeopardized if a change is so major that it has to go through a lengthy Change Control Board process for approval. 
</p><p>Programming decisions over very minor issues, which make perfect sense to the software developer and the project manager, may create chaos back at the workstation when the software goes into use. 
</p><p>I know of a large training company that spent $5 million dollars redesigning their ordering software. Previously, the item numbers matched the product being ordered in a logical way. For example, 4125 might be a student manual, 4225 was the accompanying student exercise disk, 4325 could represent the instructor manual, 4425 was the course outline for marketing purposes, and so on. You could order all the items in the 4X25 series on the same screen.
</p><p>Each day, administrative coordinators in 140 locations around the world ordered the same kinds of materials over and over and soon memorized the item numbers. Once you knew the number for a student manual you could immediately key in the numbers for the other items without looking them up, and ordering went quickly. 
</p><p>In the redesign, somehow the project team forgot the need to consider the way the ordering process was used by the real people doing it. Under the new design, there was no logical relationship between items. Item 6358 might be the same student manual that once was 4125, the accompanying student exercise disk was now 8872, and the instructor manual for the same class was 3392.
</p><p>Not only did the user have to look up each item and try to &#x201c;forget&#x201d; the old numbers and system, each type of item was now on a separate page. 
</p><p>Administrative coordinators were furious. Ordering slowed to a crawl. The project far exceeded its time and cost baselines. 
</p><p>As a project manager, you should get the users talking to the software developers early and often.
</p>

<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

