<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<title>Serve Your Team - Project Manager 97Things</title>
<meta property="og:title" content="Serve Your Team">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_en/Serve_Your_Team.htm">
<meta property="og:site_name" content="97 Things Every Project Manager Should Know.">
<meta property="og:locale" content="en_US">
<script type="text/javascript" src="../js/darkmode.js"></script>
</head>
<body>
<article>
<header>
<h1>Serve Your Team</h1>

<p><b>Karen Gillison</b>
<i>Leesburg, Virginia, USA</i></p>
</header>

<p>Long before I heard of an agile methodology, I worked with the best project manager I ever met. Looking back, he was using prototype techniques from the agile approach. He viewed his job as a facilitator for the team. He saw his day-to-day duties as identifying and removing obstacles, and providing team resources. He was doing things that increase team velocity**.
</p><p>There were no multi-hour meetings where you fight to stay awake until it's your turn to provide a status update. The ones where you wish you could escape and actually write some code, so you will have some progress to report for the next meeting. Instead, we started each project with a kickoff meeting, inviting people with job functions from requirements to testing. The whole team met to get a shared vision and understanding of the project. Then, every few days, the project manager would come by for what we called &#x201c;doorway&#x201d; status meetings. Each teammate gave a brief update on what was complete, what was in progress, and what issues were critical.
</p><p>This project manager tracked project status in a visual, obvious way. He had a master spreadsheet for all the assignments, listing who should complete them. He updated this document regularly, and posted a large printout outside his doorway. Having information posted where we could all see it was great for team communication. An added bonus was that it was also visible to upper levels of management, and provided them with a self-service way of getting status updates whenever they wanted. 
</p><p>A few words about &#x201c;ego&#x201d;. My favorite project manager had the maturity and self-discipline to keep his ego out of the way. Even though he was the boss, he didn't abuse his power, change tasks, or shift direction based on a whim. His actions were never detrimental to team productivity, since his main goal was to facilitate the team's progress towards excellence.
</p><p>By controlling his ego, he and the team achieved amazing results with satisfied end-users and upper management, all while meeting budget and time constraints. Because this management style was so effective, there was a noticeable absence of all-nighters, yelling, and general tension at the end of the project. In less mature corporate environments, a project manager and a smoothly performing team may not be recognized, because every project will seem easy. Even without acknowledgement, satisfaction came to our team through doing right by the company, the end-users, and each other.
</p><p>Today, an agile approach can provide new tools to make you a more effective project manager. I suggest you familiarize yourself with them, even if you aren't fortunate enough to work for an organization that has adopted these methodologies. Instead, begin integrating these tools into your traditional project management toolbox. Realize that one of the key roles of the project manager is to increase the team's velocity, and to work towards creating a team environment with few inhibitors to productivity.
</p>
<ul>
<li>Agile - An evolving methodology which promotes a software project management process that encourages shorter planning phases, more adaptability to change, teamwork, unit testing, personal accountability, and frequent customer involvement.</li>
<li>Velocity - A measurement of the rate of progress for a team, based on the amount of work done in the previous iteration or set work period. Velocity can be measured per developer, as well as for the team as a whole.</li>
</ul>


<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

