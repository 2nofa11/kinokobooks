<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<title>The Fallacy of Perfect Knowledge - Project Manager 97Things</title>
<meta property="og:title" content="The Fallacy of Perfect Knowledge">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_en/The_Fallacy_of_Perfect_Knowledge.htm">
<meta property="og:site_name" content="97 Things Every Project Manager Should Know.">
<meta property="og:locale" content="en_US">

</head>
<body>
<article>
<header>
<h1>The Fallacy of Perfect Knowledge</h1>

<p><b>David Wood</b>
<i>Fredericksburg, Virginia, USA</i></p>
</header>

<p>We all know in our heart of hearts that we don't know everything. Every day we hopefully learn a bit more about our profession, our society and ourselves. But we simply can't know it all. If we stop learning we fall behind rapidly, especially in the software industry. The idea that one can apprentice to a trade and practice that trade the rest of one's life has gone the way of the dodo. Remember the dodo? No? That's the point.
</p><p>Technology, techniques and the ideas upon which they are built change far too rapidly in our era for any practitioner to know all they need to know at any point in time. We must constantly learn and we must equally adjust to a state of ignorance, which requires us to spend some portion of every project researching the knowledge we need. Why, then, do we persist in pretending that we must, or even can, know everything about a software project during its development phase? 
</p><p>The history of software engineering is replete with attempts to control software projects, through carefully bound development and maintenance activities to prevent buggy, failed software. Most such methodologies, such as the classic "waterfall" methodology, presume that with sufficient time and up-front diligence a software project can be completely understood. Many demand that requirements be set in stone before a line of code is written. What nonsense! 
</p><p>Giving up on knowing it all during development, we might think that we can know it all later. Several software development methodologies presume this, such as the spiral or agile methodologies. Iterative development is seen as the key to delivery of a software project encoding "final" requirements. Unfortunately for adherents of those methodologies, delivery of a software project is just a comma in development, not a period. 
</p><p>Requirements, even when "agreed" upon in detailed up-front design, will change during development. It is impossible to know them all in advance. Multiple requirements often result in inconsistencies, even when they are gathered from a single source. Requirements may even mean different things to different people. Differing interpretations may be due to perception, goals. or language. In order to create a successful software project, we must accept and even embrace these ideas. We do not know it all and we never will. 
</p><p>The Fallacy of Perfect Knowledge is the delusion that it is possible to capture complete, non-conflicting requirements for a software project. The reality is that requirements will never be fully known at any time during a software project's lifecycle; not during analysis, development, maintenance nor even (or especially) when the system becomes legacy. 
</p><p>Continuous use of the agile techniques of iteration and refactoring into the maintenance phase of the software lifecycle begin to address some of these concerns. A fuller understanding of the ways that software evolves may be the next step. Until we have those conceptual tools, use them daily, and accept our ignorances big and small, we will continue to fall victim to the Fallacy of Perfect Knowledge.
</p>

<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

