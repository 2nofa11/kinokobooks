<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<title>Developer Productivity: Skilled Versus Average - Project Manager 97Things</title>
<meta property="og:title" content="Developer Productivity: Skilled Versus Average">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_en/Developer_Productivity_Mean_vs._Median.htm">
<meta property="og:site_name" content="97 Things Every Project Manager Should Know.">
<meta property="og:locale" content="en_US">

</head>
<body>
<article>
<header>
<h1>Developer Productivity: Skilled Versus Average</h1>

<p><b>Neal Ford</b>
<i>Atlanta, Georgia, USA</i></p>
</header>

<p>Let's debunk some of the myths about developer skills for project managers who have been assigned for the first time to software projects. Understand that really good software developers are much more productive than average ones. In fact, some statistics say that really good developers are multiple orders of magnitude better than poor ones. One order of magnitude is the same as multiplying a quantity by 10. The point is, a skilled programmer isn't just a little better than an average one, the difference is huge.
</p><p>What should this mean to our newly minted software project managers as they plan the development of this product? Managers erroneously think that even if you can't get the best and brightest, you still get some usefulness out of mediocre developers. But building software isn't like digging a ditch, where even the poorest ditch diggers can make a hole.
</p><p>In software development, what is programmed today becomes the foundation for tomorrow. If you have mediocre developers building your foundation, the really good developers have to go back and fix the flaws before they can move on. Hiring mediocre or average developers slows project velocity*. Frequently, taking a poor performer off the team is more beneficial than adding a good one.
</p><p>Couple this with the fact that adding people to a late project makes it even later, and you can understand why most enterprise development moves at a glacial pace. The non-experienced software project manager might reason that if adding more warehouse men allows a truck to be loaded faster, hiring additional programmers would shorten the time necessary to complete a software project.
</p><p>That won't work. It will take time, and pull other programmers off-task, to get the new guys/gals up-to-date. In addition, the communication channels increase with each addition to the team.  With a team of 2, there is one channel - Betsy Sue to Bill. Add Mike, you jump to three channels. The number of channels continues to grow exponentially.
</p><p>Here's the formula: n(n-1)/2. With 12 people on the team you have 12(12-1)/2 channels, or 66 relationships you must maintain as the project manager. Add one more person and you now have 78 communication channels to oversee.
</p><p>Building software with average developers exposes two project myths: 1)that you can shorten a project by adding people and, 2) that its OK to have average developers produce average (buggy/off-task) code at an average pace. In truth, average developers drag overall productivity down and the project takes longer than necessary to complete.
</p><p>The solution? Give good developers powerful tools. You'll get higher quality software faster. Second, having warm bodies doesn't help projects, and having to baby-sit poor developers cuts the productivity of your good developers, who are craftsmen. Software is too complex to turn into an assembly line manufacturing process.
</p><p>Want faster software development? Spend the extra money to hire and nurture excellent software developers. It will pay off in both the short term, and in the long term when it's time to maintain the code. 
</p>
<ul>
<li>Velocity - A term used in agile software development to show the rate of progress for a team or a team member. How much can an individual programmer be able to produce in a given time period.
</li>
</ul>


<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

