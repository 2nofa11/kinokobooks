<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<title>Favor the Now Over the Soon - Project Manager 97Things</title>
<meta property="og:title" content="Favor the Now Over the Soon">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_en/Favor_the_Now_over_the_Soon.htm">
<meta property="og:site_name" content="97 Things Every Project Manager Should Know.">
<meta property="og:locale" content="en_US">
<script type="text/javascript" src="../js/darkmode.js"></script>
</head>
<body>
<article>
<header>
<h1>Favor the Now Over the Soon</h1>

<p><b>Scott Davis</b>
<i>Broomfield, Colorado, USA</i></p>
</header>

<p>One of my favorite sayings is, "Exaggeration is a million times worse than understatement." The project management variation on this is, "Now is a million times better than soon, and a gazillion times better than later."
</p><p>If you're in the software development industry, you're familiar with the "vaporware" phenomenon -- software that is endlessly talked about but never actually delivered. We can plan the software. We can discuss the features it will have. But software that you can touch, run, and interact with is a million times better than a Word document full of requirements.
</p><p>This means hurry up and write the software -- now! The prototype you put together will instantly give you feedback about usability. Worried about performance? How can you optimize performance without the software?
</p><p>Agile software methodologies favor now, over soon, by focusing on quick iterations, often no more than a week or two. The idea is to get software written and in front of the user as quickly as possible. If the user likes what they see, you have an immediate victory. More importantly, if they don't like what they see, you have failed fast.
</p><p>A quick success is only a hundred times better than a late success, but a quick failure is a million times better than a late failure. It gives you time to rethink, readjust, and rewrite the software sooner rather than later. A failure one week before the ship date can be a show-stopper. A failure early in the process gets forgotten by the time the software actually goes live.
</p><p>If the software language or framework that you are using doesn't let you roll out new features in a matter of seconds or minutes, the tool you are using is part of the problem. If compiling your code takes hours instead of minutes or seconds, you will be less likely build early and often. These friction points in the software development put you at a distinct competitive disadvantage. Many of the top websites that you use on a daily basis can roll out new features in as little as 30 minutes.
</p><p>They are also industry leaders because of the quality of the software they produce quickly. They test their code incessantly. Do they wait to until the end of the software development lifecycle to write their unit and integration tests? Nope. They write them now. Test-first and test-driven methodologies are &#x201c;de rigeur&#x201d; in top software development shops, because if testing is important, it is important enough to do <b>now</b>.
</p><p>It is not that planning isn't a crucial part of successful software projects. Just do your planning based on modern software practices and expectations. Methodologies that date back to a time when code was written out in long-hand, meticulously transferred to punch cards, then hand-carried in a shoebox to a system administrator, don't translate well to an era where software is easy, free, and instantaneous. We are in the era of the now, and your processes should be adjusted accordingly.
</p>

<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

