<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<title>Planning for Reality - Project Manager 97Things</title>
<meta property="og:title" content="Planning for Reality">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_en/Planning_for_Reality.htm">
<meta property="og:site_name" content="97 Things Every Project Manager Should Know.">
<meta property="og:locale" content="en_US">

</head>
<body>
<article>
<header>
<h1>Planning for Reality</h1>

<p><b>Craig Letavec, PMP, PgMP, MSP</b>
<i>Waynesville, Ohio, USA</i></p>
</header>

<p>It's amazing how often software projects to fall into late, over budget, off-quality situations. Even in highly touted software shops with international certifications and maturity assessments lining the walls, the trials of managing the very fluid environment of software development are many.
</p><p>The pace of development will naturally vary throughout the life of the project. Sometimes you are ahead of schedule, sometimes behind.  Often project managers seek to control these fluxuations through strict, detailed project timelines that lay out prescribed task assignments and deadlines. However, they find themselves making multiple revisions to the plan along the way to deal with the dynamic nature of creating software.
</p><p>While the development and execution of a detailed, keenly estimated project plan is important in the success of any project, many software project managers may find some benefit in adding some &#x201c;reality time&#x201d; into their plans.
</p><p>The critical chain method uses the concept of &#x201c;buffers&#x201d; as one means to deal with inherent variance over the lifecycle of the project. Try introducing &#x201c;buffer time&#x201d; or &#x201c;reality time&#x201d; into your schedule at each phase of your software development lifecycle (design, coding, testing, etc.).
</p><p>Buffer time allows for a degree of flexibility within a phase without the need to perform major scheduling adjustments. Think of this buffer time as a time contingency reserve for the phase. The process is fairly straightforward. Look at each phase of your project, consider the total duration of the phase based on your best planning, and then add a buffer task at the end of the phase that has a duration of a percentage of the total phase duration, say 10% or so.
</p><p>For example, on a 40 day total duration for a design phase, add four days of buffer time to the end of the phase for a total phase duration of 44 days. Will the phase actually take 44 days?  Perhaps not, but the &#x201c;unused&#x201d; time can then be either carried forward, or added to future buffers.
</p><p>As experienced software project managers know, projects may proceed on schedule during the early stages, only to end up dragging on later in the process. Getting ahead of the curve almost always has more advantages than disadvantages.
</p><p>Expect skepticism the first time you try this approach. &#x201c;Non-productive&#x201d; time is the first thing managers will want to eliminate when they review your schedule. Stand your ground. Make the simple point that you are performing basic schedule risk management.
</p><p>If you have a phase of the project that is riskier than another, add more buffer at that point. You may be able to add less of a risk buffer in other spots on the timeline.
</p><p>Last, make sure that you are not &#x201c;double dipping&#x201d;. Double dipping would be adding extra time at the task level and then again at the phase level. The technique works best when you are not already buffering each of your task durations by routinely adding additional time to each activity to deal with the unknown.
</p><p>Try it. It works!
</p>

<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

