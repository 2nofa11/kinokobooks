<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<title>Chances are your biggest problem isn't technical - Software Architect 97Things</title>
<meta property="og:title" content="Chances are your biggest problem isn't technical">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_en/Chances_are_your_biggest_problem_isnt_technical.htm">
<meta property="og:site_name" content="97 Things Every Software Architect Should Know.">
<meta property="og:locale" content="en_US">

</head>
<body>
<article>
<header>
<h1>Chances are your biggest problem isn't technical</h1>
</header>

<p>Right now someone's running a failing project to build a payroll system.   Probably more than one someone.
</p><p>
Why? Was it because they chose Ruby over Java, or Python over Smalltalk? Or because they decided to use Postgres rather than Oracle? Or did they choose Windows when they should have chosen Linux? We've all seen the technology take the fall for failed projects. But what are the chances that the problem was really so difficult to solve that Java wasn't up the the task?
</p><p>
Most projects are built by people, and those people are the foundation for success and failure. So, it pays to think about what it takes to help make those people successful.
</p><p>
Equally, there's a good chance that there's someone who you think is "just not doing it right" and is undermining the project. In these cases, the technology you need to solve your problem is very old and well established indeed, in fact it's possibly the most important technical innovation in the history of humanity. What you need is a <i>conversation.</i>
</p><p>
Mere familiarity with the conversation as a technology isn't enough.  Learning to treat people with respect, and learning give them the benefit of the doubt, is one of the core skills that turn a <i>smart architect</i> into one an <i>effective architect</i>.
</p><p>
There's lots more to it than this, but a couple small tips can significantly increase your conversational effectiveness:
</p><p>
1) Approach these events as conversations --<i> not as confrontations</i>.
If you assume the best about people and treat this as a way to ask questions you definitely learn more, and you are less likely to put people on the defensive.
</p><p>
2) Approach these conversations only after you've got your attitude right.
If you're angry, frustrated, annoyed, or otherwise flustered its very likely that the other person will interpret you non-verbals as indicating that you're on the attack.
</p><p>
3) Use these as opportunities to set mutually agreed upon goals.
Instead of telling a developer that they need to be quiet in meetings because they never let anybody speak, ask if they can help you increase other people's participation. Explain that some people are more introverted and need longer silences before they jump into a conversation, and ask if they will help you out by waiting 5 seconds before jumping in.
</p><p>
If you start with a shared purpose, treat people "problems" as an opportunity to learn, and manage your own emotions, you'll not only become more effective, you'll also discover that you learn something every time.
</p>

<footer>
<p class="author">By Mark Ramm</p>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

