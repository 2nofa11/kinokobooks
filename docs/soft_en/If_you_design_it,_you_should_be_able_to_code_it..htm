<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<title>If you design it, you should be able to code it. - Software Architect 97Things</title>
<meta property="og:title" content="If you design it, you should be able to code it.">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_en/If_you_design_it,_you_should_be_able_to_code_it..htm">
<meta property="og:site_name" content="97 Things Every Software Architect Should Know.">
<meta property="og:locale" content="en_US">
<script type="text/javascript" src="../js/darkmode.js"></script>
</head>
<body>
<article>
<header>
<h1>If you design it, you should be able to code it.</h1>
</header>

<p>As an architect, it's tempting to create elaborate designs and abstractions that elegantly address the problem at hand. It is even more tempting to sprinkle new technologies into the project. At the end of the day, someone has to implement your design, and the architectural acrobatics that you have the developers perform impact the project.  
When designing the architecture for your project, you need to have a feel for the amount of effort necessary to implement each element of your design - if you developed an element before it will much easer to estimate the effort required. 
Don't use a pattern in your design that you haven't personally implemented before. Don't rely on a framework that you haven't coded against before. Don't use a server that you haven't configured before. If your architecture depends on design elements that you haven't personally used, there are a number of negative side effects: 
</p>
<ol><li> You will not have experienced the learning curve that your developers will have to face. If you don't know how long it takes to learn a new technology, you won't be able to give a good estimate on time to implement. 
</li><li> You will not know the pitfalls to avoid when using the elements.  Inevitably, things will not go as well as the demo that the trained expert in the technology provided. If you haven't worked with the technology before, you will be blindsided when this happens. 
</li><li>  You will lose the confidence of your developers. When the developers ask questions about the design and you aren't able to give solid answers, they will quickly lose confidence in you and your design. 
</li><li> You will introduce unnecessary risk.  Not knowing these things can put a big question mark on key elements of the solution. No one wants to start a project with big, unnecessary risks hanging around. 
</li></ol>
<p>So how does one go about learning new frameworks, patterns, and server platforms? Well that's another axiom in and of itself: <b>Before anything, an architect is a developer.</b> 
</p>

<footer>
<p class="author">By Mike Brown</p>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

