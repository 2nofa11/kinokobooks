<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<title>Pattern Pathology - Software Architect 97Things</title>
<meta property="og:title" content="Pattern Pathology">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_en/Pattern_Pathology.htm">
<meta property="og:site_name" content="97 Things Every Software Architect Should Know.">
<meta property="og:locale" content="en_US">
<script type="text/javascript" src="../js/darkmode.js"></script>
</head>
<body>
<article>
<header>
<h1>Pattern Pathology</h1>
</header>

<p>Design patterns are one of the most valuable tools available to the software architect.  Using patterns allows us to create common solutions that are easier to communicate and understand.  They are concepts that are directly associated with good design.  This fact can make it very enticing to demonstrate our architectural prowess by throwing a lot of patterns at a project.  If you find yourself trying to shoehorn your favorite patterns into a problem space where they don't apply, you may be a victim of pattern pathology.
</p><p>Many projects suffer from this condition.  These are the projects where you envision the original architect looking up from the last page in his patterns book, rubbing his hands together and saying &#x201c;Now, which one will I use first!?&#x201d;.  This mentality is somewhat akin to that of a developer who begins writing a class with the thought &#x201c;hmmm, what class should I extend?&#x201d;.  Design patterns are excellent tools for mitigating necessary complexity but like all tools, they can be misused.  Design patterns become a problem when we make them the proverbial hammer with which we must strike every nail.  Be careful that your appreciation for patterns doesn't become an infatuation that has you introducing solutions that are more complicated than they need to be.
</p><p>Stamping patterns all over a project unnecessarily is over-engineering.  Design patterns are not magic and using them doesn't automatically qualify a solution as good design.  They are reusable solutions to recurring problems.  They have been discovered and documented by others to help us recognize when we're looking at a wheel that's already been invented.  It's our job to identify problems solved by these solutions when they arise and apply design patterns appropriately.  Don't let your desire to exhibit design pattern knowledge cloud your pragmatic vision.  Keep your sights focused on designing systems that provide effective business solutions and use patterns to solve the problems they address.
</p>

<footer>
<p class="author">by Chad LaVigne</p>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

