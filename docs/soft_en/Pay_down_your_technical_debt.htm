<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<title>Pay down your technical debt - Software Architect 97Things</title>
<meta property="og:title" content="Pay down your technical debt">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_en/Pay_down_your_technical_debt.htm">
<meta property="og:site_name" content="97 Things Every Software Architect Should Know.">
<meta property="og:locale" content="en_US">
<script type="text/javascript" src="../js/darkmode.js"></script>
</head>
<body>
<article>
<header>
<h1>Pay down your technical debt</h1>
</header>

<p>On any project that is in production (i.e. it has customers that are using it), there will come a time when a change must be made; either
a bug needs fixing,or a new feature must be added. At that point there
are two possible choices; you can take the time needed to "do it
right", or you can take one or more "shortcuts" and try to get the
change out the door sooner.
</p><p>Generally,the
business people (sales/marketing and customers) will want the change
made as quickly as possible while the developers and testers will be
more interested in taking the time to properly design,implement, and
test the change before delivering it to the customers.
</p><p>As
the project's architect you'll have to decide which makes more sense
and then convince the decision makers to take your advice; and as
withmost architectural issues there is a trade-off involved. If you
believe the system is reasonably stable then it may make sense to go
the "quick and dirty" route and get the change into production quickly.
That's fine, but you need to know that in doing so your project is
incurring some <i>"</i>technical debt" which must be repaid
later.  Repayment, in this case, means going back and making the change
in the way you would have if you'd had the time and resources to do it
right the first time.
</p><p>So why the concern
over making changes properly now versus later? It's because there's a
hidden cost to making these quick and dirty fixes. For financial debts
the hidden cost is called "interest" and most anyone with a credit
cardknows how expensive just paying the interest on a debt can be. For
technical debt, interest takes the form of instability in the system,
and increased maintenance costs due to the hacked in changes, the lack
of proper design, documentation, and/or tests. And, like financial
interest, regular payments must be made until the original debt is
repaid.
</p><p>Now that you understand a bit more
about the true cost of technical debt, you might decide the price is
too high and you can't afford the cost. But when it's a choice between
having the developers get the fix out as quickly as possible or taking
a severe financial hit, it generally makes sense to get the fix out
quickly. So take the hit and get the change into production ASAP, but
don't stop there.
 
Once the fix is in
production, have the developers go back and fix it properly so that it
can be included in the next scheduled release. This is the equivalent
of charging something on your credit card and then paying off the
balance at the end of the month so you don't get charged interest. This
way you can provide the fast changes the business needs, while
keepingyour project out of debtor's prison.
</p>

<footer>
<p class="author">by Burk Hufnagel</p>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

