<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
<title>There Can be More than One - Software Architect 97Things</title>
<meta property="og:title" content="There Can be More than One">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_en/There_Can_be_More_than_One.htm">
<meta property="og:site_name" content="97 Things Every Software Architect Should Know.">
<meta property="og:locale" content="en_US">

</head>
<body>
<article>
<header>
<h1>There Can be More than One</h1>
</header>

<p>It seems to be a never&ndash;ending source of surprise and distress to
system builders that one data model, one message format, one message
transport&mdash;in fact, exactly <i>one</i> of any major architectural
component, policy or stance&mdash;won't serve all parts of the business
equally well. Of course: an enterprise ( "enterprise" is red flag #1)
big enough to worry about how many different "Account" tables will
impact system building next decade is most likely too big and diverse
for one "Account" table to do the job anyway.
</p><p>In technical domains we can force uniqueness. Very convenient
for us. In business domains the inconsistent, multi&ndash;faceted, fuzzy,
messy world intrudes. Worse yet, business doesn't even deal with "the
world", it deals with people's opinions about aspects of situations in
parts of the world. One response is to deem the domain to be technical
and apply a unique solution by <i>fiat</i>. But reality is that which
does not go away when one stops believing in it, and the messiness
always returns as the business evolves. Thus are born enterprise data
teams, and so forth, who spend all their (very expensive) time trying
to tame existential dread through DTD wrangling. Paying customers tend
to find the level of responsiveness that comes form this somewhat
unsatisfactory.
</p><p>Why not face up to the reality of a messy world and allow
multiple, inconsistent, overlapping representations, services,
solutions? As technologists we recoil in horror form this. We imagine
terrifying scenarios: inconsistent updates, maintenance overhead,
spaghetti&ndash;plates of dependencies to manage. But let's take a hint from
the world of data warehousing. The schemata data marts are often
(relationally) denormalized, mix imported and calculated values
arbitrarily, and present a very different view of the data than the
underlying databases. And the sky does not fall because of the
non&ndash;functional properties of a mart. The ETL process sits at the
boundary of two very different worlds, typically transaction versus
analytical processing. These have very different rates of update and
query, very different throughput, different rates of change of design,
perhaps very different volumes. This is the key: sufficiently different
non&ndash;functional properties of a sub&ndash;system create a boundary across
which managing inconsistent representations is tractable. 
Don't go duplicating representations, or having multiple
transports just for the fun of it, but do always consider the
possibility that decomposition of your system by non&ndash;functional
parameters may reveal opportunities to allow diverse solutions to your
customers' advantage. 
</p>

<footer>
<p class="author">By Keith Braithwaite</p>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

