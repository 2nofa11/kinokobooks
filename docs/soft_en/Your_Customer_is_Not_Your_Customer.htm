<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
<meta charset="UTF-8">
<link rel="stylesheet" href="../css/style_en.css"/>
<title>Your Customer is Not Your Customer - Software Architect 97Things</title>
<meta property="og:title" content="Your Customer is Not Your Customer">
<meta property="og:type" content="article">
<meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/soft97_en.png">
<meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/soft_en/Your_Customer_is_Not_Your_Customer.htm">
<meta property="og:site_name" content="97 Things Every Software Architect Should Know.">
<meta property="og:locale" content="en_US">

</head>
<body>
<article>
<header>
<h1>Your Customer is Not Your Customer</h1>
</header>

<p>As you work in requirements
meetings to design software, pretend that your customer is not your
customer. It turns out that this is a very easy thing to do, because it
is true.
</p><p>Your customer is not your customer. Your customer's
customer is your customer. If your customer's customer wins, your
customer wins. Which means you win.
</p><p>If you're writing an
ecommerce application, take care of the things that you know people who
will shop at that site will need. They'll need transport security.
They'll need encryption of stored data. Your customer may not mention
these requirements. If you know that your customer is leaving out
things your customer's customer will need, address them, and
communicate why.
</p><p>If your customer willingly and knowingly
doesn't care about certain important things that your customer's
customer cares about&mdash;as happens from time to time&mdash;consider stepping
away from the project. Just because Sally Customer doesn't want to pay
for SSL every year and wants to store credit cards in plain text
because it costs less to build, it's not okay to just agree. You're
killing your customer's customer when you agree to work you know is a
bad idea.
</p><p>Requirements gathering meetings are not implementation
meetings. Forbid the customer's use of implementation-specific terms
unless it's an absolute, or well-understood problem. Allow your
customer to express only the Platonic ideal, his concept and goals,
rather than dictating a solution or even using technical terms.
</p><p>So
how do you maintain such discipline in these meetings, which can be
deceptively difficult? Remember to care for your customer's customer.
Remember that while your customer is writing your check, you must be
clear that you need to honor best practices, so that you can make what
the customer really needs, not just what they say they need. Of course,
this takes lots of discussion, and clarity as to exactly what you're
doing and why. 
</p><p>Perhaps, as with so many things in life, this
is best clarified by a poem. In 1649, Richard Lovelace wrote "To
Lucasta, on Going to the Wars". It ends with the line: &#x201c;I could not
love thee, dear, so much, / Loved I not honor more.&#x201d;
</p><p>We cannot love our customers so much, love we not their customers more. 
</p>

<footer>
<p class="author">By Eben Hewitt</p>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>

</footer>
</article>
</body>
</html>

