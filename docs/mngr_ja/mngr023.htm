<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【23】巧妙なコードはメンテナンスが困難 - プロジェクト・マネジャーが知るべき 97 のこと</title>
  <meta property="og:title" content="【23】巧妙なコードはメンテナンスが困難">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr023.htm">
  <meta property="og:site_name" content="プロジェクト・マネジャーが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e23">【23】巧妙なコードはメンテナンスが困難</h1>
<div class="author">
デイビッド・ウッド（David Wood）
</div>
<div class="author_address">
アメリカ、バージニア州フレデリックスバーグ
</div>
<p>　開発者は奇跡を求められるものです。現在のプロジェクトのコードを多数のパッチを含んだ時代遅れのレガシーソフトウェアとともに動かすため、開発者は巧妙な方法を見つけなくてはなりません。開発者のスキルと創造力をもってすれば、最終的にその仕事をやり遂げる巧妙なコードが作れるかもしれません。しかし、巧妙なコードはその長さや複雑さのために、将来のメンテナンス問題を引き起こしかねません。</p>
<p>　あなたがソフトウェア開発に不慣れなプロジェクト・マネジャーであれば、ためらわずに開発者に新しい言語や開発ツールを調べさせましょう。開発者に自由を与えるのです。これは開発者のコーディング実務や成果物を改善する革新的な手段になるためです。レガシーなインターフェイスに対して、開発者はもっと高速で、テストやメンテナンスすべきコードが少なくて済むソリューションを設計できるかもしれません。プロジェクトにとって、これは間違いなく有益です。</p>
<p>　現在のコードと同じ機能を大幅に少ないコードで実現できるような、革新的な新しいプログラミング言語もあるかもしれません。こうした言語を利用すると、コードの構造がはるかにシンプルになり、テストしやすく、自己定義可能で、保守すべきものも小さくなり、メンテナンスしやすくなるといった利点があります。</p>
<p>　もちろん、新しい言語やプラットフォームを導入する際には懸念もあります。新しいコードは現在開発中のソフトウェアやアップグレードにとって、本当に解決策になり得るのでしょうか？　これまで投資してきたレガシーなデータベース、ユーザーインターフェイス、サードパーティ製ソフトウェアで使われている既存のソフトウェアとの整合性は、長期にわたってとれるのでしょうか？　チーム内や部門内に、この新しい言語やプラットフォームを使ってソフトウェアを作れる開発者がほかにいるのでしょうか？　その言語の作者から適切な製品サポートを受けられるのでしょうか？　タイムリーにアップデートや改良がなされるのでしょうか？</p>
<p>　たとえあなたがプログラミングに詳しくなくても、プログラマが新しい言語を導入するのを渋ってはいけません。もし新しい言語が C や Java の流れをくむものであれば（あるいは、よくある一般的な処理方法のものであれば）、それを現在のやり方にマージするのはそれほど苦痛ではないでしょう。</p>
<p>　ただし、コードに新たに変更点がある場合には、必ずドキュメント化しておきましょう。そうしておかないと、コードとドキュメントが枝分かれしてしまい、システムを理解するにはコードを見るのが一番、ということになってしまいます。これはソフトウェアコンポーネントとシステムメタデータの「結合の喪失」とも呼ばれます。また、ソフトウェアをメンテナンスする上で不適切なドキュメントがあれば、それを置き換えなくてはなりません。</p>
<p>　プロジェクトチームにいる開発者が革新的になれるよう後押ししましょう。ただし、複雑すぎるほど巧妙であってはいけません。あまりに巧妙にやってしまうと、あとに続く人が苦労します。もしあとに続く開発者がコードを読めなければ、どうやってメンテナンスすればよいのでしょう？　プログラマはみな自らの雇用確保のために巧妙にやろうとしますが、プロジェクト・マネジャーはそこから得られるものはありません。</p>
<p>　巧妙すぎるコードは結局のところ、メンテナンスを困難にします。最終的に、ソフトウェアはメンテナンス不能になり、作り直しのために高くつくことになるでしょう。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="mngr022.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="mngr024.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
