<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【62】大きな丸いボールという誤った考え - プロジェクト・マネジャーが知るべき 97 のこと</title>
  <meta property="og:title" content="【62】大きな丸いボールという誤った考え | プロジェクト・マネジャーが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr062.htm">
  <meta property="og:site_name" content="プロジェクト・マネジャーが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e62">【62】大きな丸いボールという誤った考え<span id="color-scheme"></span></h1>
<div class="author">
デイビッド・ウッド（David Wood）
</div>
<div class="author_address">
アメリカ、バージニア州フレデリックスバーグ
</div>
<p>　完全に球形で、完全になめらかに作られたボールを想像してみましょう。このボールにある唯一の設計要求は、どこを測定しても直径がぴったり同じであることです。ボールは完全な球になるまで、何度も何度も磨かれます。問題がひとつもなくなれば、作業はすべて終了します。これ以降の変更はありません。それが完全というものです。</p>
<p>　これはあなたがこれまで取り組んできたソフトウェアプロジェクトのように聞こえましたか？　私はそうは思いませんでした。ソフトウェアはこんな風にはいかないのです。</p>
<p>　ソフトウェアはそのライフサイクルを通して絶えず変化するものです。設計判断は初期の要求に基づいてなされる場合が多いですが、新しい要求が出てくると突如としてそれらは制約になります。コードを新しい要求に合わせて改修していくと、設計は乱されて、コードは徐々にメンテナンス不能になっていきます。ボールは丸くなるよう作られましたが、徐々にぼろぼろであざだらけになっていくのです。</p>
<p>　大きな丸いボールという誤った考えとは、ソフトウェアシステムに対する要求は納品後あまり変化しないとか、さらにわるいことに、要件はコントロールできるといった妄想のことです。</p>
<p>　初期のソフトウェア工学の研究者らは、コーディングを始める前に要件が十分理解できていれば、メンテナンス危機は起こらないだろうと考えていました。納品後の要求変更によって起こる問題を取り上げて、それを悪者にする人もいました。要求を固定することで安定したシステムが生み出せると考えていたのです。ユーザーが変更を要求する権利を制限しようとする人もいました（例えば「ユーザーの追加機能を計画してコントロールすることで、変更管理の必要性を減らす」ことは、ジェームズ・マーチンとカーマ・マックルーアが 1983 年に提案した「メンテナンスに対する解決策」のひとつに挙げられていました）。</p>
<p>　残念ながら、このような厳格なコントロールは、ソフトウェアシステムをエンドユーザーにとって使えないものにするという意図せぬ副作用があります。こうした判断は目先の損得勘定に基づいていることが多く、1990 年代におけるユーザーと IT 部門の疎遠をもたらし、機能追加と称した小規模でコピーだらけの部内ソフトウェアシステム開発が続く大きな原因となりました。</p>
<p>　要求は絶えず移り変わるものです。ソフトウェアプロジェクトに対する要求は非常にもっともな、非常に単純な理由で変わります。第一に、ソフトウェアは変更可能である、ということです。ソフトウェアは融通が利きます。一般的にハードウェアを変更するよりもソフトウェアを変更する方が、コストの上ではるかに効果的です。</p>
<p>　第二に、ほとんどのユーザーは競争環境にいます。彼らはお互いに組織同士で競い合っています。必死に競争していると、新たな強みを得ようとシステムで最も融通の利くところに頼ります。ソフトウェアの柔軟性は魅力的なのです。</p>
<p>　もし私たちが大きな丸いボールという誤った考えに見切りをつけられれば、要求を変更するのがもっと楽になり、ソフトウェアの柔軟性をありのままに享受することができます。これは私たちがコントロールできる大きな強みになります。要求は変化します。私たちはコードをメンテナンスする必要があります。設計を乱すような新しい要求を追加する必要があります。これはフィーチャーであって、俗にいうところのバグではないのです。</p>
<p>　私たちは順応性のあるソフトウェアを設計できますが、それは最初から順応性をもった考え方をした場合に限ります。順応性、設計の柔軟性、変更への準備は、どんな新しいソフトウェアプロジェクトにとっても不可欠であるべきです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>

<div>
    <a class="sns-button" href="https://twitter.com/share?url=https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr062.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/twitter.svg"></a>
    <a class="sns-button" href="https://www.facebook.com/share.php?u=https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr062.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/facebook.svg"></a>
    <a class="sns-button" href="https://b.hatena.ne.jp/add?mode=confirm&url=https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr062.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/hatebu.svg"></a>
    <a class="sns-button" href="https://getpocket.com/edit?url=https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr062.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/pocket.svg"></a>
</div>

<nav>
<ul class="nav-links">
<li class="prev-article"><a href="mngr061.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="mngr063.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
