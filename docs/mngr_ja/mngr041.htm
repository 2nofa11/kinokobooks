<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【41】現実を考慮して計画する - プロジェクト・マネジャーが知るべき 97 のこと</title>
  <meta property="og:title" content="【41】現実を考慮して計画する">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr041.htm">
  <meta property="og:site_name" content="プロジェクト・マネジャーが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e41">【41】現実を考慮して計画する</h1>
<div class="author">
クレイグ・レタベック（Craig Letavec）<span class="author_title">PMP、PgMP、MSP</span>
</div>
<div class="author_address">
アメリカ、オハイオ州ウェインズヴィル
</div>
<p>　どれだけ多くのソフトウェアプロジェクトが納期に遅れ、予算を超過し、低品質であるかは驚くばかりです。国際的な認証と成熟度評価を得ていると大々的にうたっているソフトウェア会社ですら、ソフトウェア開発をとりまく非常に不安定な環境をうまく管理するためには、幾多の試練を乗り越えなくてはなりません。</p>
<p>　プロジェクトの開発進捗は絶えず変化します。当初のスケジュールよりも早く進むこともあれば、もちろん遅れることもあります。たいていの場合、プロジェクト・マネジャーはこの変動を、正確かつ精巧なプロジェクトタイムライン（タスク割り当てと締め切り期日をあらかじめ定めたもの）によってコントロールしようとします。しかし、ソフトウェアを作るという動的な性質に対処するために、途中で計画を何度も改訂することになります。</p>
<p>　細部にわたって抜け目なく見積もったプロジェクト計画を策定して実行することは、プロジェクトを成功させるために重要なことなのですが、多くのプロジェクト・マネジャーは計画に「現実時間」を加味するのが有効であることに気づいています。</p>
<p>　クリティカルチェーン法では、ソフトウェア開発ライフサイクルに特有の変動をうまく扱う手段として、「バッファ」という概念を使います。ソフトウェア開発ライフサイクルの各フェーズ（設計、実装、テストなど）に「バッファ時間」や「現実時間」を取り入れてみましょう。</p>
<p>　バッファ時間を使うと、大幅なスケジュール調整をする必要なく、各フェーズに柔軟性をもたせることができます。バッファ時間を各フェーズにおける不確実性だと考えるのです。やり方は非常に簡単です。プロジェクトの各フェーズについて、まずは最善の計画に基づいた期間を検討します。それから、フェーズの最後に一定の割合、例えばフェーズ期間の 10% のバッファを追加するのです。</p>
<p>　例えば 40 日の設計フェーズの場合、最後に 4 日のバッファ時間を追加して、全体で 44 日のフェーズにするのです。実際のところ、このフェーズには 44 日かかるのでしょうか？　おそらくはかからないでしょう。「未使用」時間は繰り越してもよいですし、後方にあるバッファに追加しても構いません。</p>
<p>　経験豊かなプロジェクト・マネジャーならみんな知っているように、プロジェクトの初期は予定通りに進むかもしれませんが、後半になると結局は遅れていくものです。進捗のカーブよりも先手を打っておく方が、ほとんどの場合得策です。</p>
<p>　初めてこのアプローチを試すときには懐疑的な態度をとりましょう。「非生産的」な時間というのは、マネジャーがスケジュールをレビューするときに最初に取り除きたくなるものです。地に足をつけてください。基本的なスケジュールリスク管理を実践しているのだと単純に考えるのです。</p>
<p>　ほかよりもリスクの高いフェーズがあれば、そこにはさらにバッファを追加しておきましょう。代わりに、ほかのバッファを減らしてもよいでしょう。</p>
<p>　最後に、「二重取り」していないことを確かめましょう。二重取りとは、タスクレベルに余分な時間を追加しているのに、フェーズレベルにも余分な時間を追加することを指しています。あなたが未知なものを扱うときに、いつも当たり前のように余分な時間を加味してタスク期間にバッファを追加しているなら、このテクニックはうまく機能しません。</p>
<p>　さあ試してみましょう。うまくいくはずです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="mngr040.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="mngr042.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
