<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【04】「見積り＝不幸の始まり」にしないために - プロジェクト・マネジャーが知るべき 97 のこと</title>
  <meta property="og:title" content="【04】「見積り＝不幸の始まり」にしないために | プロジェクト・マネジャーが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr104.htm">
  <meta property="og:site_name" content="プロジェクト・マネジャーが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="j04">【04】「見積り＝不幸の始まり」にしないために</h1>
<div class="author">
初田 賢司
</div>
<div class="author_address">
東京
</div>
<p>　「マネジメントしやすいプロジェクト」とは、どういうプロジェクトでしょうか。私は、スコープやスケジュール、コストのベースラインがしっかり設定されていて、プロジェクト進行中にベースラインからの乖離が発生すれば、それが把握できてコントロールできるプロジェクトだと思います。鍵はベースラインです。ベースラインは、プロジェクトの計画段階で設定されます。ところが、設定するにあたっての制約事項や大枠は、プロジェクトが始まる前に決まっているのです。つまり、見積り段階です。プロジェクト・マネジャーは、どんなことを考えて見積りを行えばよいのでしょうか。</p>
<p>　まず、「何のために見積るか」を考えてみます。見積りの目的は 3 つです。1 つ目は、「注文を取る」、組織内なら「稟議を通す」ことです。見積りの結果、プロジェクトの開始に結びつけることが、第一の目的です。では、単に注文を取りやすい条件で見積ってよいでしょうか？　もちろん、これでよいはずがありません。目的の 2 つ目は、「適切な利益やコストを確保する」ことです。そのためには、見積りで提示する金額や期間が説明できて、納得してもらわなくてはなりません。統計や提唱されている見積りモデルなどのエンジニアリング的なアプローチを駆使して、論理的、合理的に説明できることが求められます。3 つ目は、「プロジェクトを成功に導く基盤を作る」ことです。これがプロジェクト・マネジャーにとって最も重要なことです。ソフトウェアの開発に仕様変更はつきものです。これをコントロールしやすい仕掛け、つまり、ベースラインをしっかり設定できているかどうかがプロジェクトの成否に大きく影響します。例えば、権威のある見積りモデルを使って算出した見積値により、2 つ目の目的である適正なコストが確保できていても、モデルに与えるパラメータが複雑で、プロジェクトの状況変化に応じて算出値の変化を説明できなければベースラインとして機能しているとは言えません。3 つの目的をすべて満たしている見積りが、よい見積りです。</p>
<p>　では、どう見積ればよいでしょうか。まず思い留めて欲しいのが、スコープとコストやスケジュールのベースラインの設定や変更に順序性があることです。スコープのベースラインが変更されたときに、コストやスケジュールのベースラインが変わります。したがって、見積りのときにも、以下のプロセスで作業を行えば、変更に強い見積りができます。</p>
<ol type="1">
<li>最終成果物で実現する機能を洗い出し、「何を作るか」を明確にする。</li>
<li>最終成果物に備える非機能要件のレベルを検討し、「どれぐらいのパフォーマンス」にするか明確にする。</li>
<li>最終成果物を作るための作業を定義し、「どう作るか」を明確にする。</li>
<li>「どう作るか」をもとに、「いくらかかるか」を明確にする。</li>
</ol>
<p>　仕様変更があって 1 の作るものが追加されたり、2 の信頼性や性能などパフォーマンスの要件が変わると、3 の作業が追加されて工数が増え、4 の費用も増えます。実際の見積りの手順としては、概算見積りの段階では、1 の「何を作るか」は、あいまいな状態で機能やフィーチャーをブレークダウンしても定義し切れませんので、「どれぐらいの大きさのものを作るか」に置き換え、規模を見積ります。2 の非機能要件は、本来、成果物スコープに含まれるものですが、見積りでは 3 の「どう作るか」と合わせて、工数見積りに反映します。この段階では、WBS でのスコープ定義にも限界がありますので、こういう開発パターン、非機能要件のレベルなら生産性がどれぐらいになるかを想定して工数を算出します。4 では、算出した工数をもとに単価を設定して、売価やコストを見積ります。まとめると、見積りは、規模見積り→工数見積り→コスト見積りという順で整合性が取れていると変更管理もしやすくなります。とりわけ大事なのが、規模見積りです。これが成果物スコープのベースラインとして機能しないと、プロジェクトが混乱する要因となります。もともとの見積りからどう変わったかがわかるように、できる限り定量化して約束します。このときにポイントとなるのが、どういうメトリクスを使って定量化するかです。</p>
<ol type="1">
<li>非機能要件や実装形態など「どれぐらいのパフォーマンス」や「どう作るか」に左右されないメトリクスを使う。</li>
<li>計測ルールが明確で、ステークホルダー間で見積り結果を共有できるメトリクスを使う。</li>
<li>見積りからプロジェクト完了まで測定値に一貫性があるメトリクスを使う。</li>
</ol>
<p>　ファンクションポイント法を使えば、上記の 3 つの条件を満たしますが、LOC（Lines of Code）を利用する場合も、機能要件を実現するために数ステップ、今回のプロジェクトは性能の要件が厳しいので数 % 増し、というように細かく約束した方が、要件が変わったときに対応しやすくなります。</p>
<p>　見積りでプロジェクトの命運が決まります。変更要求に対して、変更箇所と責任分担を明確にできる見積りがよい見積りです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="mngr103.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="mngr105.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
