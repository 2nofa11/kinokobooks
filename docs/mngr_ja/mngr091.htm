<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【91】Web が道を示す（今のところは） - プロジェクト・マネジャーが知るべき 97 のこと</title>
  <meta property="og:title" content="【91】Web が道を示す（今のところは）">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr091.htm">
  <meta property="og:site_name" content="プロジェクト・マネジャーが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e91">【91】Web が道を示す（今のところは）</h1>
<div class="author">
デイビッド・ウッド（David Wood）
</div>
<div class="author_address">
アメリカ、バージニア州フレデリックスバーグ
</div>
<p>　「私たちは先人を手本にしています。私たちは後人の手本になります」　この言葉をスローガンにしたチャリティグループがあります。これは私たちソフトウェア開発者にも関連があります。新しいアーキテクチャ、言語、プラットフォームが有名になるたびに、私たちは「これがあらゆるプログラミング問題に対する解になる」と期待します。ところが、それは今の問題を解決してくれたとしても、明日には新しい課題に直面することになるのです。</p>
<p>　現在、私たちは何十億ものユーザーにまでスケールし、個々の構成要素のエラーに対してロバストに機能するソフトウェアアーキテクチャをひとつだけ知っています。それは Web です。Web は今までのところ、人類によって作られた最も大規模で、最も使われている、最も堅牢な情報検索システムなのです。</p>
<p>　なぜ Web はそんなにうまく機能するのでしょうか？　有名な Apache プロジェクトの創設者であるロイ・フィールディングは、まさにこの疑問について研究しました。フィールディングは初期の Web の理想的なアーキテクチャを評価し、そこからアーキテクチャスタイル要素を抽出しました。</p>
<p>　その結果、この新しいソフトウェアのアーキテクチャスタイルにはみんなが好きになる特性が備わっていることがわかりました。その特性とは、個々の構成要素の変化にも破壊にもロバストであることです。構成要素に分割することで、プログラミング言語などの実装詳細について気にしなくてもよくなりました。ここでは言語に中立なリクエストを交換するために、共通語（母国語が違う人たちでコミュニケーションするための言語）が使われます。これは非常に大きくスケールします。ここにはステートがないのです。</p>
<p>　すべての Web サイトがこうした指針となる原則を利用しているわけではありませんが、これは多くのサイトで利用されています。そして、Web は全体として、この原則を利用しています。しかし、こうした原則もお手本にすぎず、新たな革新的なアーキテクチャの開発が引き続き行われています。</p>
<p>　私たちは Web の成功から重要なことを学べます。おそらく最も重要なのは、今やムーアの法則のおかげで、私たちはシステム設計においてかなりの抽象化ができることです。もはやハードウェアとソフトウェアを非常に効率よく動かすことだけでなく、非常に安定した、非常にロバストな、非常にスケーラブルな、非常に柔軟なシステムを作ることについて考えることができるのです。また、将来の革新のための基礎となることを十分理解することで、現在のアーキテクチャの非効率性までも許容できるようになったのです。</p>
<p>　Web のような分散システムを設計するのは難しいことです。おそらくこれは、私たちそれぞれが個体であるためです。私たちはソフトウェアシステムを、世の中で経験するように中央集権化された、個人が作るものとして扱ってきました。それにもかかわらず、Web という分散システムはそのやり方を私たちに示してくれました。分散システムは概念化するのが難しく、作るのも難しいのですが、それを作るために努力する価値はあります。</p>
<p>　もちろん技術も変化します。アイデアやテクニックも変化します。フィールディングが描いたシンプルな Web は、現代の Web とは異なっています。将来の Web もまた現代の Web とは異なるでしょう。必ずしも Web は道を示すわけではないかもしれませんが、新たなシステムに適応するために重要なことは、システムに柔軟性を作り込んでおくことです。それによって初めて、動作する適応可能なソフトウェアシステムを作れるのです。こうして作られたシステムは、新たに発見された技術やアイデアと統合できるようになっており、後人の手本となるでしょう。</p>
</article>
<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>
</footer>
</body>
</html>
