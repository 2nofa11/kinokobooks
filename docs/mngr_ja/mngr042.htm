<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【42】完全な実行という誤った考え - プロジェクト・マネジャーが知るべき 97 のこと</title>
  <meta property="og:title" content="【42】完全な実行という誤った考え | プロジェクト・マネジャーが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/mngr97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/mngr_ja/mngr042.htm">
  <meta property="og:site_name" content="プロジェクト・マネジャーが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e42">【42】完全な実行という誤った考え</h1>
<div class="author">
デイビッド・ウッド（David Wood）
</div>
<div class="author_address">
アメリカ、バージニア州フレデリックスバーグ
</div>
<p>　頑張れば欠陥の少ないコードが作れるんだと思っていても、恥じる必要はありません。ほとんどの人がそう思っています。しかし残念ながら、それは不可能です。理論的にも不可能なのです。</p>
<p>　プログラムロジックのような任意性の高い論理（任意の論理）は一般的に検証困難であり、完全にテストすることは困難もしくは不可能です。最近、英国の 3 人の研究者が建築関係で使われる「れんが」と「はり」のたとえ話を引用しながら、ソフトウェアは検証困難であることを説明しました。「（ソフトウェアには）十分に予測可能な構成要素がなく、プログラムを構成する要素、文、手続き、オブジェクトなどは予測可能な方法では組み立てられない」ためです。</p>
<p>　ソフトウェアの構成要素は、レゴのようにぴったりかみ合うものではありません。ソフトウェアは非常にさまざまな方法で組み立てられます。したがって、すべての組み合わせを決定することはできません。これはチューリング完全のそこそこ実用的な定義かもしれません。要するにソフトウェアは複雑なのです。</p>
<p>　コードにおける任意の論理を追跡、検証すると聞くと難解に思うかもしれませんが、プログラマの意図を追跡するというもっと単純な作業ならどうでしょう？　確かに私たちはプログラマと話をして、彼らの意図することを尋ねることができます。ところが残念なことに、プログラマの意図というのはコードを書いてから数日のうちに失われてしまいます。要求が変わったり、ドキュメントに矛盾がある場合にはなおさらです。</p>
<p>　またプログラマは、ドキュメントのないコードやドキュメントに間違いのあるコードを残して、別の仕事に取りかかります。そうなると、残されたソースコードだけがプログラマの意図を探る最後かつ唯一の手掛かりとなります。結局のところ、プログラマの意図は、変数名やロジックフロー、たまにあるコメントといった手掛かりから、不完全ながらも判明するだけです。</p>
<p>　おそらくほぼすべての出荷済みのソフトウェア製品には、必ずどこかにバグが残っています。私たちがソフトウェアにバグを入れてしまう理由には、ひどいものもあれば（言語機能についての無知や細部への注意不足など）と正当なもの（矛盾していたり間違って伝えられた要件など）もあります。さらに、バグはソフトウェアの変更理由にもなります。バグが見つかると、そのバグを修正するためにコードをリファクタリングしますが、その過程でまた新たなバグが入ってしまうのです。</p>
<p>　1969 年にメイア・マニー・リーマンは、ソフトウェアがそのライフサイクルにおいて進化することに気づきました。彼はのちに、ソフトウェア開発には複数のフィードバックループが存在し、それらフィードバックループが進化のプロセスに影響を及ぼすことを解明しました。そこには複数の（おそらく矛盾のある）要件や設計判断が入ることも含まれます。</p>
<p>　要件や設計の判断、実装詳細に関するプログラマの理解度は、ほかのフィードバックループにも影響を与えます。すなわち、バグの原因は論理的なプロブラミングエラーとは限らないということです。意見の食い違いからもバグは入り込む可能性があります。</p>
<p>　「完全な実行」という誤った考えとは、細部に十分注意していれば欠陥の少ないコードが作れるという妄想のことです。これが正しければ、私たちはみんな構造化プログラミングの絶大な支持者になっていたでしょう。私たちはそうではありませんし、それには正当な理由があります。進化のいかなる段階においても、ソフトウェアはバグを抱えており、絶えず変化し、不正確なドキュメントがあるものなのです。</p>
<p>　このような見方をすることで、単純かもしれませんが、これまでとは異なるソフトウェアへの取り組みが必要であることがわかります。ソフトウェアの実装、要件、ドキュメントをインクリメンタルにリファクタリングするためのツールやテクニックの開発が求められているのです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="mngr041.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="mngr043.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
