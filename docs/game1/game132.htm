<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【1-32】作業フローのクリティカル・パスに効く開発環境 - ゲームクリエイターが知るべき 97 のこと</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="j32">【1-32】作業フローのクリティカル・パスに効く開発環境</h1>
<div class="author">
後藤 誠
</div>
<p>　私が長年関わって来たイベントシーン開発では、DCC ツールからの出力データや、ゲームシナリオが書き込まれたスクリプトなど、多くの「アセット」がデザイナーやプランナーによって制作される。これをゲームに最適なデータへ加工し、組み込み、編集した箇所を確認できるようにする必要がある。このステップを如何に少なく、高速に回すことができるかがクオリティに関わってくる。仮に、結果を確認できるまでに 10 分かかっていたのを 5 分に短縮できれば 2 倍のクオリティ・チェックができるようになる。理想は、アセットの編集と同時に確認ができるライブ・エディット環境（待ち時間ゼロ）だ。「触ってなんぼ」のゲーム開発では、この時間がクオリティにダイレクトに影響を与える。</p>
<p>　これまでの経験を振り返ると、いくつかの共通する有効な方法が見えてきた。それは、</p>
<ol type="1">
<li>「バッチファイルを実行」だけにする</li>
<li>サーバーで出来る事はサーバーでやる</li>
<li>各担当者間の作業フローを図にする</li>
<li>「うっかり」対策をする</li>
</ol>
<p>　である。</p>
<h2 id="バッチファイルを実行だけにする" class="unnumbered">1.「バッチファイルを実行」だけにする</h2>
<p>　デザイナーもプランナーも担当するアセット制作で手一杯である。「1 から 10 の手順で更新してください」なんてものを渡したら、何らかの問題が必ず発生する。「このバッチファイルをダブルクリックしてください」だけにしておけば、バッチ処理内で各担当者の違いを吸収できる。また、データの加工法に変更があった場合でも作業者に影響を与えることなく修正が可能である。</p>
<h2 id="サーバーで出来る事はサーバーでやる" class="unnumbered">2.サーバーで出来る事はサーバーでやる</h2>
<p>　他のデータと組み合わせてパッキングをする場合や、ムービーのようにデータ加工に時間かかる場合、更新の確認に時間がかかる。こういうときは、アセットがコミットされる度にサーバー側でその処理を行い、終了後にコミットしたユーザーへ自動で通知メールを送るようにする。こうすると、作業者はコミット後に続けて他の作業に取り掛かることができる。また、自分の制作担当範囲以外の部分をサーバー経由で参照できるので、全体としても無駄が減る。これの実現には、Jenkins などの CI ツールが便利だ。</p>
<h2 id="各担当者間の作業フローを図にする" class="unnumbered">3.各担当者間の作業フローを図にする</h2>
<p>　ある程度以上の開発規模になると、個々がプロジェクトの作業フロー全体を把握するのが難しくなる。このような状況で、ワークフロー担当のプログラマーが気を付けなければならないのは、個々の担当者からの要望や報告の具体的な内容のみではなく、作業フロー全体がどのような状況なのかを理解することである。そのために、全体の作業フローを図化し、皆が見られる Wiki などで共有しておくことが望ましい。ポストモータム時の資料にも利用できるため、非常に便利である。</p>
<h2 id="うっかり対策をする" class="unnumbered">4.「うっかり」対策をする</h2>
<p>　どんなに注意しても、「うっかり」は発生する。これは仕方がないことだ。しかし、手順や作業フローで、これを減らすことができる。以下は「うっかり」対策として私が心掛けているチェック事項である。</p>
<ul>
<li>手動で移動やコピーをさせていないか？ → 眠いときやマスター間際のとき、これが原因で問題が発生する。バッチ処理で行うようにするべきである。</li>
<li>担当ごとのファイルやフォルダのアクセス権限は適切か？ → 影響範囲を最小限にすることができる。</li>
<li>手順を間違えたら警告が出るか？ → 間違いを早く気付いてもらうようにする。</li>
<li>あらゆるアセットがバージョン管理されているか？ → 事故発生時に巻き戻しができるようにする。</li>
</ul>
<p>　その他、状況に合わせたチェック項目を更新し「うっかり」が起こらないようにするのが良い。</p>
<p>　ゲームクリエイターが考えた多くの素晴らしいアイデア。そのアイデアの実現力が成功のカギだ。そして、日々の開発サイクル改善により、実現力を上げることができる。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/" class="external text" title="https://creativecommons.org/licenses/by/3.0/" rel="nofollow">CC-by-3.0</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="game131.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="game133.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
