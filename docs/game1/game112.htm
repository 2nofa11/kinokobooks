<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【12】限られたリソースの中で～サーバ運用の現場から～ - ゲームクリエイターが知るべき 97 のこと</title>
  <meta property="og:title" content="【12】限られたリソースの中で～サーバ運用の現場から～ | ゲームクリエイターが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/game197_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/game1/game112.htm">
  <meta property="og:site_name" content="ゲームクリエイターが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="j12">【12】限られたリソースの中で～サーバ運用の現場から～<span id="color-scheme"></span></h1>
<div class="author">
大澤 範之
</div>
<p>　オンラインゲームでは、サーバ数やサーバスペックは運用コストに直結するので、常に 削減の圧力がかかっている。そんな状況の中でゲームが安定して動作するために最大限の 努力をするのがサーバ運用エンジニアである。</p>
<p>　さて、ゲームにおけるサーバ運用とは、実際には何をするのだろうか。</p>
<ul>
<li>サーバの物理的な構築、配線</li>
<li>ネットワーク環境の整備、ファイアウォール設定</li>
<li>サーバの OS セットアップとユーザ管理、アクセス権限設定</li>
<li>各サーバへのゲームプログラム配布、バージョン管理</li>
<li>外部課金処理との接続、内部課金システムの管理、開発</li>
<li>各プロセスの実行状態監視、パフォーマンス最適化</li>
<li>運用ツールの整備、開発</li>
<li>バグ調査、ログデータ解析</li>
<li>プレイヤーデータの不具合修正</li>
</ul>
<p>　エンジニアの業務範囲だけでも、このように非常に多岐にわたる。</p>
<p>　プレイヤーはいつでも好きな時にゲームを楽しみたいから、本格的に運用を開始してからはそう簡単にサービスを止める事は許されない。なので、バグ修正や機能追加のためのアップデートは十分にテストする必要があるわけだが、これがなかなか難しい。</p>
<p>　まず、サーバ構成の問題。</p>
<p>　サービス用の機材ですら、パフォーマンスに余裕があれば 1 ワールドあたりの台数削減、同時に接続するプレイヤー数が少なくなればワールド統合、なんてこともすぐに検討される。これでは、テスト環境に潤沢なサーバ群が望めない事は想像に難くない。1 サーバに全てのプロセスを同居させるような事も珍しくないだろう。しかし、これでは多人数が同時にアクセスする状況でのパフォーマンスや、複数サーバ特有の問題は検証できないし、管理ツール等、他のプログラムのテストをする際にも色々と注意が必要だ。さらに、テスト環境といえど社内で共有して使っている。基本的には QA のチームがフルタイムで検証に使用しているので、その予定の空いている時間に可能な範囲でしかサーバには手を加えられない。</p>
<p>　そして、作業時間の問題。</p>
<p>　基本的には準備段階で確立した手順通りに随時実行するだけの状態で、メンテナンス当日を迎える事になっている。けれども、「このキャンペーンは○○ワールド限定なので他のワールドにはこれらのファイルを適用しないで下さい」とか、「このファイルのこの設定はサーバ毎に IP をこう振り分けて下さい」とかいった注文が当日に舞い込んだりするのは日常茶飯事だ。そうなると、もう手作業でそれらに対応するしかない。メンテナンス時間は限られていて、その中でデータのバックアップや検証、さらにはプロセスの起動自体に必要な時間もあるから、アドリブ作業に使える時間は本当に短い。間に合わなければ延長告知が必要になるので、何とかしようと慌ててしまう。焦るとヒューマンエラーは確実に増加する。本来だったらありえないようなミスも、これまで技術者の力量でギリギリ回避していた潜在的な問題も、そういう状況の中では簡単に発現する。</p>
<p>　また、そうやって余裕なく日々の業務に追われていると最新の技術をキャッチアップする事もできなくなってしまい、ツールで回避できる問題、既に解決方法が確立している問題を繰り返す事にもなる。特に作業効率の悪さを長時間労働で辻褄合わせしようとするのは悪循環を招くだけで何もメリットはない。</p>
<p>　といった感じで、サーバ運用エンジニアはいつもテストが不十分な状態で運用を強いられている。その中で、自動化できそうなところを見つけては少しずつ潰していく事で状況の改善を図っていく。そして、それぞれのプロジェクトに必要な労力がある程度減ってくると、コストダウンのためにエンジニアの人数そのものが削られる。人件費は運用コストに直結するからだ。</p>
<p>　自分自身を不要にする事。</p>
<p>　それはサーバ運用エンジニアの究極の目標である。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/" class="external text" title="https://creativecommons.org/licenses/by/3.0/" rel="nofollow">CC-by-3.0</a> でライセンスされています。</p>

<div>
    <a class="sns-button" href="https://twitter.com/share?url=https://yoshi389111.github.io/kinokobooks/game1/game112.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/twitter.svg"></a>
    <a class="sns-button" href="https://www.facebook.com/share.php?u=https://yoshi389111.github.io/kinokobooks/game1/game112.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/facebook.svg"></a>
    <a class="sns-button" href="https://b.hatena.ne.jp/add?mode=confirm&url=https://yoshi389111.github.io/kinokobooks/game1/game112.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/hatebu.svg"></a>
    <a class="sns-button" href="https://getpocket.com/edit?url=https://yoshi389111.github.io/kinokobooks/game1/game112.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/pocket.svg"></a>
</div>

<nav>
<ul class="nav-links">
<li class="prev-article"><a href="game111.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="game113.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
