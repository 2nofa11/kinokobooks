<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【57】ポリモーフィズムの利用機会を見逃さない - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【57】ポリモーフィズムの利用機会を見逃さない">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog057.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; left: -4em; }
pre.numberSource a.sourceLine::before
  { content: attr(title);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<article>
<h1 id="e57">【57】ポリモーフィズムの利用機会を見逃さない</h1>
<div class="author">
カーク・ペパーディーン（Kirk Pepperdine）
</div>
<p>　「ポリモーフィズム」は、オブジェクト指向の基礎を成す重要な概念です。元々はギリシャ語で「多数」を意味する“poly”と「形」を意味する“morph”に由来します。プログラミングにおいてポリモーフィズムとは、同じクラスのオブジェクトやメソッドが複数の形（form）を取り得るということを意味します。しかしポリモーフィズムは、ただ単に実装が複数になるということを意味しているのではありません。ポリモーフィズムをうまく使えば、オブジェクトやメソッドの特性、動きを、コンテキストに応じて細かく変えることができます。しかも、そのために冗長な if-then-else ブロックを書く必要がないのです。そのかわり、コンテキストによってオブジェクトやメソッドが自動的に形を変えるためには、「このコンテキストならこのオブジェクト、あるいはメソッドを使う」というコードをあらかじめコンテキストの外で書いておく必要があります。ポリモーフィズムを有効に活かせば、その分コードの量が減り、読みやすくなります。そのメリットがよくわかるコード例（実用的なものとは言えませんが……）を 1 つ見てみましょう。シンプルなショッピングカートのコードです。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">public</span> <span class="kw">class</span> ShoppingCart {</a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="kw">private</span> <span class="bu">ArrayList</span>&lt;Item&gt; cart = <span class="kw">new</span> <span class="bu">ArrayList</span>&lt;Item&gt;();</a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">add</span>(Item item) { cart.<span class="fu">add</span>(item); }</a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="kw">public</span> Item <span class="fu">takeNext</span>() { <span class="kw">return</span> cart.<span class="fu">remove</span>(<span class="dv">0</span>); }</a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="kw">public</span> <span class="dt">boolean</span> <span class="fu">isEmpty</span>() { <span class="kw">return</span> cart.<span class="fu">isEmpty</span>(); }</a>
<a class="sourceLine" id="cb1-6" title="6">}</a></code></pre></div>
<p>　仮に、この Web ショップでは、ダウンロードできる商品と、物理的な配送を必要とする商品の両方を扱っているとしましょう。それに対応するためには、たとえば次のようなクラスを作ることになります。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">public</span> <span class="kw">class</span> Shipping {</a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="kw">public</span> <span class="dt">boolean</span> <span class="fu">ship</span>(Item item, SurfaceAddress address) {...}</a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="kw">public</span> <span class="dt">boolean</span> <span class="fu">ship</span>(Item item, EMailAddress address) {...}</a>
<a class="sourceLine" id="cb2-4" title="4">}</a></code></pre></div>
<p>　顧客が注文手続きを済ませたら、次のコードで商品のダウンロード、あるいは配送を開始します。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">while</span> (!cart.<span class="fu">isEmpty</span>()) {</a>
<a class="sourceLine" id="cb3-2" title="2">    shipping.<span class="fu">ship</span>(cart.<span class="fu">takeNext</span>(), ???);</a>
<a class="sourceLine" id="cb3-3" title="3">}</a></code></pre></div>
<p>　“<code>???</code>”という部分は、実際にこう書くわけではありません（こういう演算子が本当にあるわけではありません）。ここは、コンテキストによって、e メールアドレスか配送先の住所が入るはずのところです。つまり上記の例では、実際にどちらを入れるのかを決めるコード、つまりコンテキストを決めるコードが足りないということになります。<code>boolean</code> や <code>enum</code> と、<code>if-then-else</code> ブロックを使えば、このパラメータに入る値は決定できます。他には、<code>Item</code> を継承するクラスを 2 つ作るという方法も考えられます。ここでは、その 2 つのクラスに <code>DownloadableItem</code>、<code>SurfaceItem</code> という名前をつけることにしましょう。それぞれのコードは次のとおりです。この場合、<code>Item</code> は正確にはクラスではなくインタフェースで、<code>ship</code> というメソッドを 1 つ持っています。ショッピングカートに入った商品が出荷される際には <code>item.ship(shipper)</code> が呼び出されます。<code>DownloadableItem</code>、<code>SurfaceItem</code> という 2 つのクラスではいずれもこの <code>ship</code> メソッドを実装しています。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">public</span> <span class="kw">class</span> DownloadableItem <span class="kw">implements</span> Item {</a>
<a class="sourceLine" id="cb4-2" title="2">    <span class="kw">public</span> <span class="dt">boolean</span> <span class="fu">ship</span>(Shipping shipper, Customer customer) {</a>
<a class="sourceLine" id="cb4-3" title="3">        shipper.<span class="fu">ship</span>(<span class="kw">this</span>, customer.<span class="fu">getEmailAddress</span>());</a>
<a class="sourceLine" id="cb4-4" title="4">    }</a>
<a class="sourceLine" id="cb4-5" title="5">}</a>
<a class="sourceLine" id="cb4-6" title="6"><span class="kw">public</span> <span class="kw">class</span> SurfaceItem <span class="kw">implements</span> Item {</a>
<a class="sourceLine" id="cb4-7" title="7">    <span class="kw">public</span> <span class="dt">boolean</span> <span class="fu">ship</span>(Shipping shipper, Customer customer) {</a>
<a class="sourceLine" id="cb4-8" title="8">        shipper.<span class="fu">ship</span>(<span class="kw">this</span>, customer.<span class="fu">getSurfaceAddress</span>());</a>
<a class="sourceLine" id="cb4-9" title="9">    }</a>
<a class="sourceLine" id="cb4-10" title="10">}</a></code></pre></div>
<p>　この例では、<code>Shipping</code> クラスの <code>ship</code> メソッドを呼び出す仕事を <code>Item</code> クラスに委譲しています。物理的に配送すればいいのか、ダウンロードの方がいいのかという指定は <code>Item</code> クラスが自動的にするので、if-then-else ブロックを書かなくても、商品ごとに適切な出荷ができます。上記のコードは、Command パターンと Double Dispatch パターンという 2 つのパターンの使用例でもあります。この 2 つは、組み合わせて使うと効果的なことが多いパターンです。2 つのパターンを組み合わせる上で重要になるのが、ポリモーフィズムをうまく利用することです。それができれば、if-then-else ブロックの数を減らすことができるのです。</p>
<p>　もちろん、ポリモーフィズムを利用するより、if-then-else ブロックを使った方が良いという場合も時にはあります。しかし、ポリモーフィズムを利用する方が、コードが読みやすく、またバグも少なくなる可能性が高いのです。コードの中に今、if-then-else ブロックになっている箇所があるのなら、そのすべてについてポリモーフィズムが使えないか検討した方が良い、と言ってもいいでしょう。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog056.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog058.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
