<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【06】見知らぬ人ともうまくやるには - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【06】見知らぬ人ともうまくやるには | プログラマが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog106.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="j06">【06】見知らぬ人ともうまくやるには<span id="color-scheme"></span></h1>
<div class="author">
小飼 弾
</div>
<p>　バグには 2 種類しかありません。1 つは、出来るはずのことが出来ないこと。もう 1 つは、出来てはならないことが出来てしまうこと。そんなこと言われるまでもない？　しかしプログラマという人種は前者には十分な注意を払っても、後者には前者ほど注意を払わない生き物のように思われます。</p>
<p>　SQL インジェクションに CSRF……いわゆる脆弱性というのはすべて後者に属するバグで、しかも必ずサービスが始まってから顕在化します。こうした脆弱性が後を絶たないのは、プログラマが出来なかったことを出来るようにすることには一生懸命でも、そこで力つきてしまって、出来てはならないことが本当に出来ないかをチェックをするだけの余裕がないことの現れかもしれません。</p>
<p>　これを防ぐには一体どうしたらよいのでしょうか？</p>
<p>　私は LLEval という Web サービスを提供しています。任意のコードを実行するという Web サービスで、類似サービスには codepad などがあります。こうしたサービスはどうやって</p>
<pre class="shell"><code>#!/usr/bin/perl
system qw{rm -rf /}</code></pre>
<p>のような「出来てはならない」ことを出来ないようにしているのでしょう？</p>
<p>　結論から言うと、システムコールを監視し、実行されてはならないシステムコールを受け取ったら即座に実行を停止するという方法を採っています。例えば上記のコードであれば <code>unlink</code> システムコールが必ず発行されますが、これを許可しなければよいわけです。</p>
<p>　しかしこれでうまく行くのも、アプリケーションプログラムが「何かするため」には、システムコールを経由しなければならないという OS の仕組みがあってこそです。古き佳き MS-DOS の頃ならさておき、現代的な OS はすべてそうなっています。I/O などの計算機資源にアクセスするには、システムコールという API を介するしかないのです。</p>
<p>　ここに大いなるヒントがあります。出来てはならぬことを出来なくするには、「出来てはならぬことを禁じる」のではなく、はじめから「出来ていいことだけを出来るようにする」と考えるのです。</p>
<blockquote>
<p>見知らぬ人とうまくやる一番のコツは、見知らぬことをしないこと。</p>
</blockquote>
<p>　とはいえ、「出来てはいいこと」を定義するのは案外難しいものです。<code>rm -rf /</code> だって、スーパーユーザーであれば出来なければならないことだと「定義されて」います。スーパーユーザーに出来ないことはあってはならないというのが Unix の流儀ですから。だからこそ wheel 登録されているユーザーも、必要な時のみ <code>su</code> ないし <code>sudo</code> でスーパーユーザー権限を取得するというのが作法にもなっているのですが。</p>
<p>　誰に、いつ、なにを許可するのかというのは、プログラマに限らず人間社会の永遠の課題であり続けるでしょう。それでも「出来ていいことだけを出来るようにする」をデフォルトにするだけで、この課題は格段に楽になるはずです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>

<div>
    <a class="sns-button" href="https://twitter.com/share?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog106.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/twitter.svg"></a>
    <a class="sns-button" href="https://www.facebook.com/share.php?u=https://yoshi389111.github.io/kinokobooks/prog_ja/prog106.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/facebook.svg"></a>
    <a class="sns-button" href="https://b.hatena.ne.jp/add?mode=confirm&url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog106.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/hatebu.svg"></a>
    <a class="sns-button" href="https://getpocket.com/edit?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog106.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/pocket.svg"></a>
</div>

<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog105.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog107.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
