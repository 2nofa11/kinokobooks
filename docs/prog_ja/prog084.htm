<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【84】正しいアルゴリズムとデータ構造を選ぶ - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【84】正しいアルゴリズムとデータ構造を選ぶ">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog084.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; left: -4em; }
pre.numberSource a.sourceLine::before
  { content: attr(title);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<article>
<h1 id="e84">【84】正しいアルゴリズムとデータ構造を選ぶ</h1>
<div class="author">
ヤン・クリチアン・“JC”・ヴァン・ウィンケル（Jan Christiaan “JC” van Winkel）
</div>
<blockquote>
<p>　多数の支店を持つ大銀行が窓口業務のために新しいコンピュータを導入しました。しかし、その処理はあまりに遅く、日々不満が募っていました。まだオンラインバンクなどはない頃で、ATM も現在のように広く使われるようになる前の話です。銀行を直接訪れて手続きをする人が今よりはるかに多く、コンピュータが遅いとたちまち長蛇の列ができてしまいました。いら立った銀行はついには、「このままだと契約を破棄する」とコンピュータのベンダを脅し始めました。</p>
<p>　ベンダは、遅延の原因を突き止めるべく、パフォーマンス解析とチューニングのスペシャリストを銀行に送り込みました。それでわかったのは、端末上で動くあるプログラムが、1 つで CPU キャパシティのほとんどすべてを消費していたということです。プロファイリングツールを使い、そのプログラムについて詳しく調べた結果、問題を引き起こしている関数が特定できました。関数のソースコードは次のようになっていました。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" title="1"><span class="cf">for</span> (i=<span class="dv">0</span>; i&lt;srtlen(s); ++i) {</a>
<a class="sourceLine" id="cb1-2" title="2">   <span class="cf">if</span> (... s[i] ...) ...</a>
<a class="sourceLine" id="cb1-3" title="3">}</a></code></pre></div>
<p>文字列sは、平均でも数千文字の長さになります。このコード（実は銀行側が書いたものでした）は即座に修正され、銀行の窓口業務は滞りなく進むようになりました。</p>
</blockquote>
<p>　上の例の場合は、必要もないのに、一度に扱うデータが極端に大きくなってしまうところが問題だったわけですが、ではどうすればこういう問題の発生は防げたのでしょうか。</p>
<p>　このコードでは、<code>strlen</code> が呼び出される度に、終端の null 文字に到達するまで、文字列中の数千もの文字一つ一つが調べられることになります。そしてその際、文字列に変更が加えられることは決してないのです。もし、下のように、文字列の長さが先に確かめられるコードになっていれば、<code>strlen</code> が数千回呼び出される（つまり百万回単位で同様の処理が繰り返される）ということにはならなかったはずです。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb2-1" title="1">n=strlen(s);</a>
<a class="sourceLine" id="cb2-2" title="2"><span class="cf">for</span> (i=<span class="dv">0</span>; i&lt;n ++i) {</a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="cf">if</span> (... s[i] ...) ...</a>
<a class="sourceLine" id="cb2-4" title="4">}</a></code></pre></div>
<p>　「まずは動かすこと。速くするのはその後でいい」という格言を知っている人は多いでしょう。局所的な最適化の落とし穴を避けるためには、この格言を心に留めておくことが大切です。しかし、先の例のようなコードを見ると、「遅くても何でもいいからとにかく動かせ」というマキアベリ的な発想でコードを書いているのではないか、と疑ってしまいます。</p>
<p>　この種の「何も考えていないようなコード」は実はかなり多く見つかります。「車輪の再発明をするな」とよく言われますが、ここで言いたいのは、単にそういうことではありません。経験の浅いプログラマには、深く考えることなく、とにかく次々にコードを書いてしまう傾向があります。そして、その間にバブルソートなどのアルゴリズムを「発明」してしまうことがあるのです。それで自分が良いコードを書いたと信じ込みます。</p>
<p>　適切なアルゴリズムを選ぶことは大切ですが、それには、適切なデータ構造を選ぶということも含まれます。データ構造の違いはプログラムの処理に大きな影響を与える可能性があるからです。たとえば、検索すべき項目の数が百万にもなる時には、リンクリストを使うか、ハッシュを使うか、それともバイナリツリーを使うかで、プログラムに対するユーザの評価はまったく変わることになるでしょう。</p>
<p>　プログラマは一般に、車輪の再発明をすべきでなく、可能であれば既存のライブラリを利用すべきと言われます。しかし、上の銀行のような問題が起きないようにするには、それだけではなく、既存のアルゴリズムについて、そのスケール特性について、学ぶ必要があります。一見魅力的だけれど、うかつに使うと最新のテキストエディタでも 1980 年の WordStar のような昔のプログラム並みに遅くなってしまうような機能もあるのです。プログラミングにおける「再利用」を重視する人は多いですが、いつ、何を、どのように再利用すべきかがわからなければ、良い結果にはなりません。それをわかるためには、問題領域について、またアルゴリズムとデータ構造について、十分な知識が必要なのです。</p>
<p>　一般には「良くない」とされているアルゴリズムもありますが、優れたプログラマであれば、そういうアルゴリズムでさえも状況によっては良い結果を生むと知っています。たとえば、問題領域の性質上、扱う項目の数が絶対に 5 を超えることはないとあらかじめわかっていれば、項目のソートに際しても、5 より大きい項目数を考える必要はありません（例：「ヤッツィー：Yahtzee」というゲームでは、サイコロの数が 5 つと決まっている）。その場合には、バブルソートが最も効率的なソートアルゴリズムということになるかもしれません。どんな道具にもそれに合った使い道というのはあるのです。</p>
<p>　アルゴリズムやデータ構造に関しては良い本が何冊かあるので、是非とも読んで、内容を完全に理解しましょう。読むべき本の例としては、Donald Knuth の『The Art of Computer Programming』（有澤誠 他訳、アスキー）などがあげられます。この本は素敵なことに、よく読んで、もし運良く著者の誤りを発見して報告すれば、2 ドル 56 セントの小切手が受け取れます（256 セントは、16 進数なら 100 セント、つまり 1 ドルだから、ということで 2 ドル 56 セントになったようです）。</p>
</article>
<footer>
<p class="license">This work is licensed under a <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">Creative Commons Attribution 3</a></p>
</footer>
</body>
</html>
