<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【15】コードの論理的検証 - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【15】コードの論理的検証">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog015.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e15">【15】コードの論理的検証</h1>
<div class="author">
イェッチェル・キムチ（Yechiel Kimchi）
</div>
<p>　ソフトウェアに誤りがないことを論理的に検証するための「形式的証明（formal proof）」という手法があります。しかし形式的証明を手作業でやろうとすると、コードそのものを書くより手間がかかり、しかもその際にミスが起きる恐れもあります。自動ツールが使えればそのほうが望ましいのは確かですが、いつもそれが可能とは限りません。ここは間を取って、半形式的証明とでも呼べる方法をここでお話ししましょう。</p>
<p>　まずすべきことは、対象となるコードをすべて短いセクション——1 行、ファンクションコール 1 つだけのブロックから 10 行くらいのブロックまで——に分割することです。そうして短く切った上で、個々のセクションが正しいかどうかをチーム内で話し合うのです。その場合、どのセクションについても、メンバーの中で最も懐疑的な態度の人が正しいと納得すれば、一応「正しい」とみなしていいでしょう。</p>
<p>　コードをセクションに分ける際には、まずセクションの終端までの間で、プログラムのステート（プログラムカウンタや、すべての「生きた」オブジェクトの持つ値）が、簡単に説明できるようになっていることが重要です。また、セクションの中での機能（状態変化）は 1 つのタスク（仕事）に絞りこまれていて、これも簡単に説明できることが大切です。このガイドラインを守ると、検証が容易になり、関数の <strong>事前条件</strong> や <strong>事後条件</strong>、ループやクラス（のインスタンス）の <strong>不変条件</strong>（invariant）といった概念の意味を統一することにもつながります。個々のセクションをできるだけ他から独立させるように努力することも重要です。これも、もちろん検証を容易にすることに役立つわけですが、セクションに変更を加える際に、他への影響を考えずに済むという意味でも、絶対に必要なことと言えます。</p>
<p>　よく知られていて、一般的に良いとされている（しかし実際にはあまり実践されていない）コーディングプラクティスの多くは、コードの論理的検証を容易にする上でもやはり役立ちます。これは逆に言えば、論理的検証を楽にしようと努力するだけで、コードのスタイルや構造の改善につながるということです。実践すべきコーディングプラクティスの例を次にあげておきます。当然のことながら、こうしたプラクティスが守られているか否かは、多くの場合、静的コード解析によって自動的にチェックできます。</p>
<ul>
<li>goto 文の使用は避ける。使用すると、離れたところにあるセクションどうしに強い依存関係が生じてしまう。</li>
<li>変更可能なグローバル変数は作らない。変更可能なグローバル変数があると、それを使用するすべてのセクションが相互依存関係になってしまう。</li>
<li>変数のスコープは可能な限り小さくする。たとえば、ローカルオブジェクトは、最初に使用する部分の直前で宣言する。</li>
<li>オブジェクトは可能な限り、<strong>不変（immutable）オブジェクト</strong> にする。</li>
<li>縦、横にうまくスペースを入れて、できるだけコードを読みやすくする。たとえば、関連し合う部分には同じようにインデントを入れる、セクションの分かれ目には空白行を入れるなど。</li>
<li>オブジェクトや型、関数などには、その特性や機能がすぐにわかる（しかも比較的短い）名前をつける。それによりコードが自己ドキュメント化され、おおよその意味が、一見するだけでわかるようになる。</li>
<li>セクションを入れ子にする必要が出た時は、それを関数にする。</li>
<li>関数はできる限り短くし、機能は 1 つに絞り込む。古くから言われる「24 行制限」は今も有効である。ディスプレイのサイズや解像度は変わっているが、人間の認知能力は 1960 年代からまったく変化していない。</li>
<li>関数のパラメータはできるだけ減らす（最高でも 4 つまでにする）。これは必ずしも、関数で扱うデータを減らすということを意味しない。関連するパラメータを 1 つのオブジェクトにまとめることで、オブジェクトの不変条件を 1 箇所に集中させることができる。それにより凝集性、整合性の検証が容易になる。</li>
<li>ブロックからライブラリにいたるまで、コードのどの単位においても、<strong>インターフェースはできる限り狭くすべし</strong>。外部とのコミュニケーションが減れば、その分だけ検証すべき事柄も減ることになる。オブジェクト内部の状態を戻す「getter」があると、その分検証の負担が増える。処理対象となる情報を提供するようオブジェクトに要求する、というのは望ましいことではない。オブジェクトには、そのオブジェクトがすでに持っている情報の処理をさせるべきである。言い換えると、<strong>カプセル化とは結局のところ、インターフェースを狭くするということである</strong>。</li>
<li>クラスの不変条件を保つという観点から、「setter」の使用は推奨できない。setter があると、オブジェクトの状態が変化することになり、不変条件が満たせなくなってしまう。</li>
</ul>
<p>　コード正しさを論理的に検証すると同時に、コードの内容についても検証をし、チーム内で話し合うようにすれば、より理解を深めるのに役立ちます。自分が理解したことを互いに伝え合えば、全員にとって利益になるでしょう。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog014.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog016.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
