<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【62】プリミティブ型よりドメイン固有の型を - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【62】プリミティブ型よりドメイン固有の型を">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog062.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; left: -4em; }
pre.numberSource a.sourceLine::before
  { content: attr(title);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<article>
<h1 id="e62">【62】プリミティブ型よりドメイン固有の型を</h1>
<div class="author">
アイナー・ランドル（Einar Landre）
</div>
<p>　1999 年 9 月 23 日、火星探査機「マーズ・クライメイト・オービター（MCO）」は火星を周回する軌道への突入に失敗し、燃え尽きました。3 億 2730 万ドルが失われた原因は、ソフトウェアのエラーでした。そのエラーは、具体的には「単位の混在」でした。同じ数値の単位を、地上のソフトウェアではポンドとしていたのに対し、宇宙船ではニュートンとしていたのです。その結果地上では、宇宙船のスラスタ推力を実際の約 4.45 分の 1 とみなしてしまうことになりました。</p>
<p>　データの型付けがもっと強ければ、あるいはドメイン固有の型が使われていれば問題の発生を防げたという事例は数多くありますが、MCO の事故もその 1 つと言えるでしょう。プログラミング言語 Ada には、これを根拠とする機能が多数組み込まれています。Ada は、安全性が特に重要視される組み込みソフトウェアの実装を目的として設計された言語だからです。Ada は型付けが強く、プリミティブ型とユーザ定義型の両方について、以下のような静的チェックをするという特徴があります。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ada"><code class="sourceCode ada"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">type</span> Velocity_In_Knots <span class="kw">is</span> <span class="kw">new</span> <span class="dt">Float</span> <span class="kw">range</span> <span class="fl">0.0</span> .. <span class="fl">500.00</span>;</a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">type</span> Distance_In_Nautical_Miles <span class="kw">is</span> <span class="kw">new</span> <span class="dt">Float</span> <span class="kw">range</span> <span class="fl">0.0</span> .. <span class="fl">3000.00</span>;</a>
<a class="sourceLine" id="cb1-3" title="3">Velocity: Velocity_In_Knots;</a>
<a class="sourceLine" id="cb1-4" title="4">Distance: Distance_In_Nautical_Miles;</a>
<a class="sourceLine" id="cb1-5" title="5">Some_Number: <span class="dt">Float</span>;</a>
<a class="sourceLine" id="cb1-6" title="6">Some_Number:= Distance + Velocity; <span class="co">-- コンパイラが型エラーを検出</span></a></code></pre></div>
<p>　さほど要求の厳しくないドメインでも、文字列や浮動小数点数といった言語（あるいはそのライブラリ）の提供するプリミティブ型を使うより、ドメイン固有の型を使う方が好ましいという場合は珍しくありません。最近では Java、C++、Python など、抽象データ型をクラスとして表現する言語も増えています。たとえば、<code>Velocity_In_Knots</code>（速度のデータを扱う型。単位は常に「ノット」）、<code>Distance_In_Nautical_Miles</code>（距離のデータを扱う型。単位は常に「海里」）といった型を、クラスとして表現することができるのです。こうした型を定義すれば、コードの品質を大きく向上させることができるでしょう。それは具体的には次のような利点があるためです。</p>
<ul>
<li>コードが読みやすくなる。ドメインの重要な概念を表す言葉がそのまま型の名前になっているので、Float、String といった型名が使われるより、意味がわかりやすい。</li>
<li>テストがしやすくなる。機能一つ一つがカプセル化され、他から独立するため、1 つ 1 つのテストがしやすくなる。</li>
<li>コードの再利用が容易。同じコードを複数のアプリケーションやシステムに簡単に再利用できる。</li>
</ul>
<p>　この種のアプローチは、静的な型付けの言語でも、動的な型付けの言語でも同様に有効です。両者の違いは、静的な型付けの言語では、コンパイラが型のチェックをしてくれるのに対し、動的な型付けの言語では、ユニットテストで型のチェックをせざるを得ないということくらいでしょう。ただ、型チェックの手段は違っても、ドメイン固有の型を使う目的や、その使い方は基本的に同じです。</p>
<p>　マーズ・クライメイト・オービターの事故を貴重な教訓とし、ドメイン固有の型を積極的に使ってソフトウェアの品質を高めるべきです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog061.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog063.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
