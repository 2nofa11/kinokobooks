<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【76】コード分析ツールを利用する - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【76】コード分析ツールを利用する | プログラマが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog076.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e76">【76】コード分析ツールを利用する</h1>
<div class="author">
サラ・マウント（Sarah Mount）
</div>
<p>　プログラマの中には、「テストがいかに重要か」を、プログラミングを始めた頃から頭にたたき込まれてきた人が多いでしょう。近年では、ユニットテストやテスト駆動開発、アジャイル開発などが広く行われるようになり、開発サイクルのあらゆるフェーズでテストを最大限活用するという考え方を受け入れる人も増えました。しかし、テストがいかに重要と言っても、それがコードの品質を高める唯一の方法というわけではありません。他にも方法は数多くあるのです。</p>
<p>　はるかな昔、まだ C が「新しい言語」だった頃、CPU 時間と記憶容量はとても貴重なものでした。このため最初期の C コンパイラでは、コードを読み取る回数を減らすためにセマンティクス分析の一部が省略されていました。つまり、コンパイル時にはバグの検出があまりできなかったのです。その埋め合わせとして、Stephen Johnson は lint というツールを書きました。これは、初期の C コンパイラでは行われなかった静的解析のためのツールで、バグを減らすのに非常に役立ちました。ただ、静的解析ツールには問題もありました。バグの誤検出が多かったのです。実際には問題がないところで警告を出してしまうことも多く、必ずしも守らなくてよいコーディングスタイル上の規約についての警告も多く出してしまっていました。</p>
<p>　現在、言語やコンパイラ、静的解析ツールをめぐる状況は当時とは大きく異なっています。メモリや CPU 時間は相対的に「安い」ものになり、コンパイラ自身がチェックできるエラーも大幅に増えました。ほほ全ての言語で、必ず 1 つは、スタイルガイドの違反や、よく見られるバグを検出するためのツールが用意されるようになっています。中には、ヌルポインタ逆参照など、かなり見つけにくいバグを検出できるツールまであります。</p>
<p>　C 向けの Splint、Python 向けの Pylint などは、設定変更も可能な高度なツールです。「設定変更ができる」というのは、この場合、検出するエラーや警告の種類を選ぶことができるということです。設定変更には、設定ファイルや、コマンドライン引数などを使用する他、IDE での設定変更ができる場合もあります。Splint には、プログラムの処理がよりわかりやすくなるよう、注釈をコメントのかたちで入れる機能もあります。</p>
<p>　簡単なバグやちょっとした規則違反が、コンパイラでも IDE でも、lint ツールでも検出できないということはあります。その検出のために、独自の静的チェッカーを作ることもできます。そういうと何やら難しそうですが、実際にはそうでもありません。ほとんどの言語、特に「動的」と言われる言語では、抽象構文ツリーやコンパイラツールが標準ライブラリの一部に含まれていて、誰でも使えるようになっているからです。開発に普段使用している言語の標準ライブラリにも、あまり使われないような片隅に、静的解析や動的テストに利用できる便利なものが隠れているかもしれません。よく調べてみる価値はあるでしょう。たとえば Python の標準ライブラリには、「逆アセンブラ」が含まれています。コンパイル済みのコード、あるいはコードオブジェクトが、どのようなバイトコードから生成されたのかがそれでわかるのです。逆アセンブラなどと言われると、Python 言語の開発チームのコンパイラ担当者のみが使うような難解なツールなのではとも思えますが、しかし実際には、一般のプログラマの作業にも驚くほど役立つのです。たとえば、逆アセンブルできるものの中には、最新のスタックトレースなども含まれます。これにより、直近の（捕まえられなかった）例外を投げたのが、どのようなバイトコードだったのかを正確に知ることができます。</p>
<p>　コードの品質向上にあたっては、テストだけに頼るのではなく、解析ツールも積極的に利用すべきでしょう。自らツールを作ることにも、恐れることなくぜひ挑戦してみてください。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog075.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog077.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
