<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【81】エラーがエラーを相殺してしまう - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【81】エラーがエラーを相殺してしまう">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog081.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e81">【81】エラーがエラーを相殺してしまう</h1>
<div class="author">
アラン・ケリー（Allan Kelly）
</div>
<p>　コードは嘘をつきません。プログラムは必ず人間が書いたとおりに動きます。ただ、ある箇所で書いたことと、別の箇所で書いたことが矛盾していた場合、思いがけない動きをすることがあり得ます。</p>
<p>　アポロ 11 号の月着陸船のソフトウェア設計を指揮した Allan Klumpp は、あるインタビューで、エンジンを制御するソフトウェアにバグがあったことを明かしています。そのバグのせいで、着陸船の動きが不安定になる恐れがあったというのです。しかし、結果的にそのバグは別のバグによって相殺されたため、発見も修正もされず、アポロ 11 号、12 号の月着陸は無事成功しました。</p>
<p>　処理が完了したかどうかを戻り値で知らせる関数があったとしましょう。そしてその関数に、本来仕 true を戻すべき時に false を戻す、というバグがあったとします。さて、呼び出した側の関数が、戻り値のチェックをしない作りになっていたとしたらどうでしょうか。ある日誰かが戻り値のチェックをしていないことに気づいてチェックするコードを加えるまでは、何事も起きず、何も問題なく動いているように見えるのではないでしょうか。</p>
<p>　別の例を挙げましょう。状態を XML ドキュメントのかたちで保持するアプリケーションがあったとします。しかし、あるノードの書き込みの際、仕様では <code>TimeToDie</code> とすべきと書いであるところを、誤って <code>TimeToLive</code> としてしまっていたとしたらどうでしょうか。この場合、XML 書き込みのコードと読み込みのコードがどちらも同じように誤っていたとしたら何も問題は起きません。しかし、どちらか一方を修正してしまった場合、あるいは、また新たなアプリケーションが同じドキュメントを読み込んだ場合には、平衡状態が崩れ、問題が露呈することになります。</p>
<p>　表面上起きている問題は 1 つなのに、それに関わっているコードが 2 箇所ある場合、一つ一つ不具合を修正していくという方法で対処していくと問題が解決しない恐れがあります。バグの報告を受けると、プログラマは原因となる箇所を見つけ出して修復し、テストをします。バグの原因となっていたコードが元々 2 箇所だったとしたら、それでは問題は解決しないでしょう。2 つ目の不具合は修正されていないからです。その場合は、最初の修正はいったん元に戻し、またコードを調べて別の不具合を探すことになるでしょう。それで 2 つ目の不具合を見つけ出し、修正をしたとします。しかし、1 つ目の不具合の修正は元に戻っていますから、やはり問題は解決しません。問題が解決しなければ、修正は元に戻されることになります。これが何度か繰り返されることも多いですが、やがて人によっては、どちらの不具合も問題には関係ないとみなし、第 3 の不具合を探し始めることもあります。しかし、それが見つかることは決してないのです。</p>
<p>　表面上 1 つに見える問題が、実は 2 つのコードの相互作用で生じている、という場合は、このように原因となる箇所の特定が難しく、袋小路に入ってしまうことが珍しくないのです。実は早い段階で原因となる箇所を見つけてはいるのですが、2 つが同時に関与しているとはなかなか気づきません。</p>
<p>　こういうことが起きるのはコードだけではありません。要件文書に誤りがあることもあるからです。この誤りはウイルスのようにあちこちの部分に広がる恐れもあります。コードのエラーが、要件文書のエラーを相殺し、表面上は問題が無いように見えてしまうのです。</p>
<p>　問題は人間にも広がります。ユーザは「このアプリケーションが『左』だと言えば、それは『右』という意味だ」と学習すると、自分の行動をそれに合わせて調整することがあるからです。新規のユーザが加わった時には、「このアプリケーションが『左ボタンをクリックしろ』と指示したら本当は『右ボタンをクリックしろ』という意味なので注意するように」と伝えたりもします。そのバグが後で突然修正されてしまったら、ユーザは慣れるまでしばらく混乱し、誤操作を繰り返すことになります。</p>
<p>　原因となる箇所が 1 つなら見つけて修正するのは簡単です。しかし問題に複数の原因がある場合は、複数の修正が必要になり対処が難しくなります。また、修正が容易な不具合は、比較的早い段階で修正されるのですが、修正が難しい不具合の修正は、どうしても後に回されるということもあります。</p>
<p>　複数の原因がある問題にどう対処すべきか、「こうすれば大丈夫」というような簡単な解決策はありません。まず大切なのは、そういう問題が存在し得ると認識することでしょう。そして、思い込みを捨ててあらゆる対処を思いつくよう、冷静さを保つことが重要です。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog080.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">インデックス</a></li>
<li class="next-article"><a href="prog082.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
