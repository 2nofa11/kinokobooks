<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【38】余分なコードは決して書かない - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【38】余分なコードは決して書かない">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog038.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e38">【38】余分なコードは決して書かない</h1>
<div class="author">
ピート・グッドリフ（Pete Goodliffe）
</div>
<p>　「より少ないことは、より豊かなこと（Less is more）」。言い古された格言ですが、確かに真実です。</p>
<p>　たとえば、一部のコードを削ることで、かえってコードベースの質が向上するということもあります。私も実際にコードベースをそういう方法で改良したことがあります。</p>
<p>　今日のソフトウェア開発は、YAGNI（You Ain’t Gonna Need It.：それは多分、必要ない）をはじめとする XP（eXtreme Programming）のプラクティスに従って行われることが増えています。ただ、人間のすることなので、どうしても時々は、プラクティスに従わずに作業をしてしまうことがあるのです。</p>
<p>　以前、ある製品を開発した時、一部のタスクの実行に時間がかかりすぎるという問題が起きたことがありました。本来は、ほぼ瞬時に完了するはずの簡単なタスクです。原因は、実装をやりすぎていたことにありました。ベルやホイッスルなどといった余分な付属機能を加えすぎていたのです。作った時にはステキなアイデアに思えたのですが、結局は無駄でした。</p>
<p>　この時は、不要と思われるコードを削ることで、実行速度を上げることに成功しました。余分な機能をなくすことで、コードベース全体の「エントロピー」を下げた、と言うこともできます。作業の間に何も壊していないことは、ユニットテストが教えてくれました。</p>
<p>　これは、コードをシンプルにすることの効用が実によくわかる例だと言えます。</p>
<p>　しかし、そもそもなぜ、不要なはずのコードが書かれたのでしょうか？　あとで余分と判断されたとはいえ、プログラマはその時必要だと思ったからそのコードを書いたわけですが、なぜそう思ったのでしょうか。またレビューやペア作業で見過ごされたのはなぜでしょうか？　それはおそらく、次のような理由ではないかと考えられます。</p>
<ul>
<li>余計かもしれないが、面白そうだと思えた（ヒント：「面白い」というのはコードを書く理由にはならない。コードベースに新たな価値を加え得るコードのみを書くこと）</li>
<li>将来必要になるかもしれないと思った。そのためにはいま書くのがベストだと思った（ヒント：これは YAGNI に反していることになる。いま不要なら、いま書くべきではない）</li>
<li>必要かどうか判断に迷った。顧客に判断を仰ぐべきだったが、それよりも実装してしまう方が簡単だと思った（ヒント：余計なコードを書くにはその分、手間と時間を要し、また保守にも手間と時間を要することになる。実際には顧客に確認をとった方が簡単なはず。余分なコードを加えてしまえば、保守にかかる手間と時間は「雪だるま式」に増えることになる）</li>
<li>余分な機能を正当化するため、議論を経ておらず、ドキュメントにも書かれていない要件をプログラマがでっちあげた（ヒント：要件を決めるのは顧客であり、プログラマが要件を決めてはいけない）</li>
</ul>
<p>　常に考える必要があるのです。いま自分が書いているコードは本当に必要なものなのか、と。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog037.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">インデックス</a></li>
<li class="next-article"><a href="prog039.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
