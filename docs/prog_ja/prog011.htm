<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【11】ドメインの言葉を使ったコード - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【11】ドメインの言葉を使ったコード">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog011.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; left: -4em; }
pre.numberSource a.sourceLine::before
  { content: attr(title);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<article>
<h1 id="e11">【11】ドメインの言葉を使ったコード</h1>
<div class="author">
ダン・ノース（Dan North）
</div>
<p>　たとえば、コードベースの中に、次のようなコードが見つかったとします。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="cf">if</span> (portfolioIdsByTraderId.get(trader.getId())</a>
<a class="sourceLine" id="cb1-2" title="2">    .containsKey(portfolio.getId())) {...}</a></code></pre></div>
<p>　このコードを見ても、何をやりたいコードなのかをすぐには理解できずに思わず頭をかきむしる……。そういう人が多いのではないでしょうか。どうも <code>trader</code> オブジェクトから ID を取得して、その ID を使って「Map の Map」から Map を取得しているようではあります。その「内側」の Map に <code>portfolio</code> オブジェクトの ID が存在しているかを確認しているようです。<code>portfolioIdsByTraderId</code> の宣言部分が次のようになっているのを見れば、もっと頭をかきむしりたくなるでしょう。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1">Map&lt;<span class="dt">int</span>, Map&lt;<span class="dt">int</span>, <span class="dt">int</span>&gt;&gt; portfolioIdsByTraderId;</a></code></pre></div>
<p>　だんだんわかってきました。どうやら、あるトレーダーが、あるポートフォリオにアクセスできるか否かを確認するためのコードのようです。そして、これから同じコードを（もっと言えば、ほとんど同じで実は細部が微妙に違っているようなコードを）あちこちで見ることになるのでしょう。たとえば特定のポートフォリオにアクセスできるかだけを確認するなどです。</p>
<p>　では、次のような書き方ではどうでしょうか。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="cf">if</span> (trader.canView(portfolio)) {...}</a></code></pre></div>
<p>　これなら頭をかきむしることはありません。「あるトレーダーがあるポートフォリオにアクセスできるか否かを確かめる」というコードだろう、ということはすぐにわかるし、その確認を具体的にどのようにするのかを知る必要はないからです。おそらく中では同じように「Map の Map」を扱うなどの面倒な処理が行われるのでしょう。そんなことは、こちらで考えなくても、<code>trader</code> オブジェクト任せにしておけば済むわけです。</p>
<p>　ここで問題なのは、読者が実際に扱うコードが、上の 2 つのうちのどちらに近いかということです。</p>
<p>　かつてプログラミングに使えるデータ構造は、非常に基本的なものに限られていました。ビットかバイトかキャラクタです（正確にはすべてがバイトだったのですが、表面上、文字や記号として扱うこともできました）。数値の扱いはやや面倒でした。コンピュータでは 2 進数が基礎となり、10 進数をそのまま扱うことができないからです。このため、何種類かの浮動小数点型を使い分けるということをしてきました。その後、配列や文字列（文字列も正確には配列の一種）、さらにスタックやキュー、ハッシュ、リンクリスト、スキップリスト、その他にも現実世界には存在しないような面白いデータ構造が加わりました。コンピュータサイエンスの世界は、現実世界を制限のあるデータ構造にどう対応づけ表現するのかという問題にずっと取り組んできました。真のベテラン技術者なら、取り組みの歴史がどのようなものだったのかを語れるでしょう。</p>
<p>　そして現在、私たちは「ユーザ定義型」というものを使うことができます。「そんなの知っているよ」と思うでしょうが、これが非常に大事なのです。ユーザ定義型が使えるか使えないかで状況はかなり変わるからです。ある分野（ドメイン）に「トレーダー」や「ポートフォリオ」といった概念が存在しているとすれば、それをたとえば <code>Trader</code>、<code>Portfolio</code> という名前の型を定義してモデリングすることができます。さらに重要なのは、こうした概念間の「関係」も、ドメインの言葉を使ってモデリングできるということです。</p>
<p>　仮にドメインの言葉を使わずにコードが書かれたとすると、読む側には「一見してもわからないが、この <code>int</code> 型データは、トレーダーの ID を表し、でもあの <code>int</code> 型データは実はポートフォリオの ID を表す」というような「暗黙の了解」が必要になります。混ぜるな危険！、両者を混同してしまわないように細心の注意が必要ということです。また、何らかのビジネス上の決まり（同じポートフォリオでも参照可能なトレーダーと、法的に参照を許されないトレーダーがいる、など）を、ユーザ定義型を使わずにアルゴリズムで、たとえばキーの Map に関連が存在するのかどうかで表現した場合には、監査やコンプライアンスの担当者には分かりにくいプログラムができあがるでしょう。</p>
<p>　プログラムに暗黙の了解の部分があると、他の人が見た時、それがわからずに苦労することになります。暗黙の了解の部分などは作らず、できるだけ明確にしておくべきでしょう。あるキーを手がかりに取得した別のキーを使って存在チェックをするというのは、明解だとはとても言えません。そんなコードを見て、すぐに「なるほど、このコードは利害衝突を阻止するためのビジネスルールの実装だな」などと直感する人はそういないでしょう。</p>
<p>　コードがどのような概念を表現しているのかは、できる限り一目でわかるようにしておくべきです。そうすれば、他のプログラマがコードを見る時に、いちいち「まず、必要な概念を理解してから、それに当てはまるコードを探す」などということをしなくても、何が書いてあるのかすぐに理解できます。また、ドメインモデルが成長した時に——あなたのドメイン理解が深まる度に——コードをそれに合わせて進化させることが可能になります。さらにカプセル化も十分ならば、特定のビジネスルールに対応するコードを 1 箇所に集中させることができます。コードを修正する際も、他のコードへの影響を心配する必要がないので、誰にも迷惑をかけずに修正ができるのです。</p>
<p>　何ヶ月か時間が経ってからコードを見たプログラマは、きっと最初にコードを書いた人に感謝するでしょう。そしてそのプログラマは、最初にコードを書いた本人かもしれないのです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog010.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">インデックス</a></li>
<li class="next-article"><a href="prog012.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
