<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【93】エラーを無視するな - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【93】エラーを無視するな">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog093.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; left: -4em; }
pre.numberSource a.sourceLine::before
  { content: attr(title);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<article>
<h1 id="e93">【93】エラーを無視するな</h1>
<div class="author">
ピート・グッドリフ（Pete Goodlife）
</div>
<blockquote>
<p>　ある夜、私は、バーに向かって街を歩いていました。友人たちと会うことになっていたのです。彼らと一緒に飲むのも久しぶりだったので、楽しみにしていました。でも早く行かねばと焦り、周りがよく見えていなかったのでしょう。縁石につまずいて、見事に転んでしまいました。注意力散漫だったわけですから、まあ自業自得です。</p>
<p>　脚が痛みましたが、早く友達に会いに行かねばと思っていたので、立ち上がり、歩き続けました。しかし、歩くほどに、痛みがひどくなってきます。はじめのうちは転んだショックの方が大きく、よくわかっていなかったのですが、どうもこれは、ただごとではないぞという痛みでした。</p>
<p>　私はそれでも構わずバーへと急ぎました。着く頃には、痛みは激痛になっていました。痛みにばかり気を取られ、せっかく来たのに結局はあまり楽しめませんでした。朝になって医者に行ってみると、脚の骨が折れているとの診断です。痛みを感じた時、そこで止まっていれば、歩き続けなければ、もっと軽く済んだでしょう。それは私のこれまでの人生で最悪の朝でした。</p>
</blockquote>
<p>　実を言えば、コードを書くときに同じようなことをしているプログラマはとても多いのではないかと思います。</p>
<p><strong>エラーが起きているのに、大したことはないと思い込もうとする。大丈夫だと自分に言い聞かせて無視する。</strong> そんなことをしても<strong>何も良いことはない</strong>のです。これでは品質の高いコードはとても書けないでしょう。これは単なる怠惰（良い「怠惰」ではなく、ひどい方の「怠惰」）です。たとえどんなに問題の起きにくいコードでも、エラーチェックとエラーハンドリングは常に必要です。省略しても時間の節約には決してなりません。後でもっと大きな問題が起きる原因を作っているだけです。</p>
<p>　コードからエラーを通知する方法は数多くあります。その例をいくつか挙げておきましょう。</p>
<ul>
<li><strong>戻り値を使う。</strong> 関数が正しく実行されなかった時、そのことを示す値が戻るようにしておく。ただし、戻り値は無視されやすく、たとえ重大な問題が潜んでいても、戻り値だけでは伝わりにくい。実際 C の関数の戻り値には「無視するのが普通」とされているものさえある。たとえば、printf の戻り値をこまめにチェックしている、という人が果たしてどのくらいいるだろうか。</li>
<li><strong>errnoを使用する。</strong> errnoはエラー通知の役割だけを担うグローバル変数で、C の中でも特異な存在である。やはり、無視されやすく、使いづらく、そして数々の厄介な問題の原因にもなる。たとえば、複数のスレッドが同じ関数を同時に呼び出したとしたらどうなるだろうか。プラットフォームによっては、その際に発生する問題を回避できる仕組みがあらかじめ用意されている場合もあるが、そうとは限らない。</li>
<li><p><strong>例外を使用する。</strong> 例外は構造化されたエラー通知・処理の仕組みである。エラー通知とハンドリングの方法は言語仕様で定められている。例外が無視されることを防ぐことも可能だが、絶対に無視されないというわけではない。何度か見たことがあるが、たとえば次のようなコードを書かれてしまう。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">try</span> {</a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="co">// …何かの機能のためのコード…</span></a>
<a class="sourceLine" id="cb1-3" title="3">} <span class="kw">catch</span> () {} <span class="co">// 例外は無視する</span></a></code></pre></div>
<p>この方法で例外は握りつぶされてしまう。ただこの場合の救いは、こういう類のコードが書かれているときは、書き手の姿勢に問題があるとすぐにわかることだ。</p></li>
</ul>
<p>　エラーが起きているのに、無視する、見て見ぬふりをする、何も起きていないことにする、そういう態度では、リスクが非常に大きくなってしまいます。私が痛みを感じても歩き続け、脚の状態を悪化させてしまったのと同じです。警告を無視して進むと、事態が余計に面倒になってしまうのです。問題の存在を察知したら、できるだけ早く対処すべきです。先延ばしは禁物です。</p>
<p>　エラーを放置すると、次のようなことが起きます。</p>
<ul>
<li><strong>不安定なコードができる。</strong> 大きな問題を引き起こすバグを多く抱えたコードができる。しかも、修正しにくいバグが多い。</li>
<li><strong>セキュリティ上問題のあるコードができる。</strong> クラッカーがシステムに侵入する際は、エラー処理に不備がある箇所を利用することが多い。</li>
<li><strong>貧弱な構造とインタフェース。</strong> 利用側のエラーハンドリングが煩雑で面倒なコードを書いてしまったときには、そのコードのインタフェースが良くない可能性がある。発生し得るエラーを明示し、重大でない場合の対処は少しでも楽になるような工夫をする必要がある。</li>
</ul>
<p>　自分の書いたコードから発生し得るエラーを丹念にチェックするだけでなく、発生し得るエラーとその条件をインタフェースに明示しましょう。エラーを隠蔽し、何も問題なく動いているかのように見せかけてはいけません。</p>
<p>　なぜエラーチェックをしないのでしょうか？　やらない理由（言い訳）も色々あるので、その例を以下に挙げておきます。「自分に当てはまる」というものがあるでしょうか。なぜ、この言い訳が通用しないかわかるでしょうか。</p>
<ul>
<li>エラー処理のコードを入れると、コードの流れが追いにくくなる。正常系の制御の流れが追いにくく、コードを読むのが難しくなってしまう。</li>
<li>納期が迫っているのに、余分な仕事を増やすわけにはいかない。</li>
<li>エラーが戻ることが絶対にない関数を使う場合はエラー処理のコードは要らないのではないか（たとえば、<code>printf</code> は必ず正しく出力をするし、<code>malloc</code> も必ず正しくメモリを確保する。そうでなければ、エラー処理のコードくらいでは解決できない大きな問題を抱えていることになる……。そういう理屈をこねる）。</li>
<li>遊びで書いただけのプログラムで、製品にするわけではないから、そこまで高い質は必要ない。</li>
</ul>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog092.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog094.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
