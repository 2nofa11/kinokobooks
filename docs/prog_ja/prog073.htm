<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【73】単一責任原則 - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【73】単一責任原則 | プログラマが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog073.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; left: -4em; }
pre.numberSource a.sourceLine::before
  { content: attr(title);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<article>
<h1 id="e73">【73】単一責任原則<span id="color-scheme"></span></h1>
<div class="author">
ロバート・C・マーティン（Robert C. Martin アンクル・ボブ）
</div>
<p>　「変更する理由が同じものは集める、変更する理由が違うものは分ける」。良いデザインの基本原則を 1 つあげるとすればこれでしょう。</p>
<p>　この原則は「単一責任原則（Single Responsibility Principle：SRP）」と呼ばれています。これはつまり、1 つのサブシステムやモジュール、クラス、関数などに、変更する理由が 2 つ以上あるようではいけない、ということです。1 つ典型的な例をあげましょう。ビジネスルール、レポート、データベースに関わるメソッドを持つクラスの例です。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">public</span> <span class="kw">class</span> Employee {</a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="kw">public</span> Money <span class="fu">calculatePay</span>() ...</a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">reportHours</span>() ...</a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">save</span>() ...</a>
<a class="sourceLine" id="cb1-5" title="5">}</a></code></pre></div>
<p>　3 つのメソッドが 1 つのクラスに集められていることを特に問題と思わず、むしろ望ましいと思うプログラマもいるでしょう。結局のところ、クラスというのは、閉じ変数を操作するメソッドの集まりなのだから、と考えるわけです。しかし、上のクラスが問題なのは、3 つのメソッドがまったく違った理由によって変更される可能性があるということです。<code>calculatePay</code> メソッドには、給与計算に関わるビジネスルールが変わる度に、変更を加える必要があります。<code>reportHours</code> メソッドには、レポートのフォーマットが変わる度に、変更を加える必要があります。<code>save</code> メソッドには、DBA がデータベーススキーマを変更する度に、変更を加える必要があります。3 つも変更理由がある <code>Employee</code> クラスは、非常に不安定な存在と言えます。3 つの理由のうちいずれかがあれば変更されてしまうからです。さらに重要なのは、<code>Employee</code> に依存するクラスがすべて、<code>Employee</code> の変更に影響されるということです。</p>
<p>　良いシステムデザインとは、システムのコンポーネントがそれぞれ独立してデプロイできるようになっているデザインのことです。独立してデプロイできるというのは、あるコンポーネントに変更を加えたからといって、別のコンポーネントの再デプロイは不要であるという意味です。しかし <code>Employee</code> が、別のコンポーネントの数多くのクラスによって利用されるのだとしたら、<code>Employee</code> に変更を加える度に、他のコンポーネントの再デプロイが必要になります。それだとコンポーネントデザイン（バズワードがお好きなら、SOA と呼んでもいいでしょう）の大きな利点が失われてしまいます。では、以下のようにクラスを分割したとしたらどうでしょうか。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">public</span> <span class="kw">class</span> Employee {</a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="kw">public</span> Money <span class="fu">calculatePay</span>() ...</a>
<a class="sourceLine" id="cb2-3" title="3">}</a>
<a class="sourceLine" id="cb2-4" title="4"><span class="kw">public</span> <span class="kw">class</span> EmployReporter {</a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">reportHours</span>(Employee e) ...</a>
<a class="sourceLine" id="cb2-6" title="6">}</a>
<a class="sourceLine" id="cb2-7" title="7"><span class="kw">public</span> <span class="kw">class</span> EmployeeRepository {</a>
<a class="sourceLine" id="cb2-8" title="8">    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">save</span>(Employee e) ...</a>
<a class="sourceLine" id="cb2-9" title="9">}</a></code></pre></div>
<p>　こうすれば、3 つのクラスはそれぞれ別のコンポーネントに配置されることになります。レポート関連のクラスと、データベース関連のクラスと、ビジネスルール関連のクラスが、すべて別のコンポーネントに配置されるということです。</p>
<p>　察しのいい人なら、上のコードでもやはり依存関係は生じていると気づいたはずです。<code>Employee</code> クラスに、他の 2 つのクラスが依存しているのです。したがって、<code>Employee</code> が変更されれば、他の 2 つのクラスの再コンパイル、再デプロイが必要になる可能性が高いと言えます。<code>Employee</code> だけを独立して修正してデプロイすることは困難なのです。それでも、他の 2 つのクラスに関しては、独立して修正し、デプロイすることが可能です。この 2 つのクラスのいずれかに変更を加えても、他のクラスの再コンパイル、再デプロイが必要になるというわけではないからです。さらに言えば、実は <code>Employee</code> も「依存関係逆転の原則（Dependency Inversion Principle：DIP）」を厳格に守れば、独立してデプロイすることが可能です。ただその話は別の本に譲りましょう。</p>
<p>　SRP を守り、違う理由で変更し得るコードを別の要素に分けることは、各コンポーネントを独立してデプロイできるような設計をする上で非常に重要な条件なのです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>

<div>
    <a class="sns-button" href="https://twitter.com/share?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog073.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/twitter.svg"></a>
    <a class="sns-button" href="https://www.facebook.com/share.php?u=https://yoshi389111.github.io/kinokobooks/prog_ja/prog073.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/facebook.svg"></a>
    <a class="sns-button" href="https://b.hatena.ne.jp/add?mode=confirm&url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog073.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/hatebu.svg"></a>
    <a class="sns-button" href="https://getpocket.com/edit?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog073.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/pocket.svg"></a>
</div>

<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog072.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog074.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
