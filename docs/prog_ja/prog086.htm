<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【86】WET なシステムはボトルネックが見つかりにくい - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【86】WET なシステムはボトルネックが見つかりにくい">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog086.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; left: -4em; }
pre.numberSource a.sourceLine::before
  { content: attr(title);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<article>
<h1 id="e86">【86】WET なシステムはボトルネックが見つかりにくい</h1>
<div class="author">
カーク・ペパーディーン（Kirk Pepperdine）
</div>
<p>　DRY（Don’t Repeat Yourself：同じことを繰り返すな）原則は、非常に重要なものです。これは、1 つのシステムの中で同じものが重複することがあってはならないという原則です。言い換えれば、1 つの知識に対応する実装は必ず 1 つにする、ということです。DRY 原則に反しているシステムを、「WET（Write Every Time：必要なものをその都度書く）なシステム」と呼ぶことがあります。WET なシステムには、同じ知識に対応する実装が複数存在します。DRY なシステムと WET なシステムでは、パフォーマンスに違いが生じます。そのことは、DRY であること、WET であることが具体的にどういう側面にどう影響するかを知れば、明確にわかるでしょう。</p>
<p>　たとえば、あるシステムに、CPU ボトルネックになっている機能があるとします。その機能を仮に、「機能 X」と呼ぶことにします。そして、機能 X が CPU の 30% を消費しているとしましょう。もし機能 X に 10 種類の実装があるとしたら、個々の実装は、平均して CPU の 3% を消費しているということになります。この場合は、じっくり見なければ、機能 X がボトルネックになっていることに気づきにくいでしょう。3% の CPU 消費自体は多くないからです。また、仮に機能 X がボトルネックであると認識できたとしても、10 種類の実装をすべて見つけ、個々に修正を施さなくてはならないという問題があります。1 つの機能の実装が 10 個存在するのは、WET なシステムであると言えます。もし DRY 原則に従ってシステムが作られていれば、機能 X が CPU を 30% 消費している事実にすぐに発見できる上、修正するコードも 1/10 で済むでしょう。そもそも、10 の実装をすべて見つけ出すための時間も手間も必要ありません。</p>
<p>　DRY 原則が破られやすい状況もあります。たとえば、コレクションを使う場合がそうです。コレクションの要素に順にアクセスするというクエリを実装する際には、同じクエリを個々の要素に対して順に実行する、というコードを書いてしまいがちなのです。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">public</span> <span class="kw">class</span> UsageExample {</a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="kw">private</span> <span class="bu">ArrayList</span>&lt;Customer&gt; allCustomers = <span class="kw">new</span> <span class="bu">ArrayList</span>&lt;Customer&gt;();</a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="co">// ...</span></a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="kw">public</span> <span class="bu">ArrayList</span>&lt;Customer&gt; <span class="fu">findCustomersThatSpendAtLeast</span>(Money amount) {</a>
<a class="sourceLine" id="cb1-5" title="5">        <span class="bu">ArrayList</span>&lt;Customer&gt; customersOfInterest = <span class="kw">new</span> <span class="bu">ArrayList</span>&lt;Customer&gt;();</a>
<a class="sourceLine" id="cb1-6" title="6">        <span class="kw">for</span> (Customer customer: allCustomers) {</a>
<a class="sourceLine" id="cb1-7" title="7">            <span class="kw">if</span> (customer.<span class="fu">spendsAtLeast</span>(amount))</a>
<a class="sourceLine" id="cb1-8" title="8">                customersOfInterest.<span class="fu">add</span>(customer);</a>
<a class="sourceLine" id="cb1-9" title="9">        }</a>
<a class="sourceLine" id="cb1-10" title="10">        <span class="kw">return</span> customersOfInterest;</a>
<a class="sourceLine" id="cb1-11" title="11">    }</a>
<a class="sourceLine" id="cb1-12" title="12">}</a></code></pre></div>
<p>　また、コレクションにクライアントが直接アクセスしてしまうと、カプセル化を壊すことになります。これはリファクタリングの可能性を狭めるだけでなく、このコードを利用する人に DRY 原則を破ることを強いてしまいます。同じクエリを逐一実装しなくてはならないからです。このような事態は、コレクションへの直接アクセスをやめれば、簡単に防ぐことができます。上記の場合は、たとえば <code>CustomerList</code> というドメイン固有のコレクション型を作成して、それを使うようにすればいいでしょう。元々存在するコレクション型に比べて、対象領域（ドメイン）の状況に適合し、クエリでアクセスするにも便利なものにすればいいのです。</p>
<p>　このような新たなコレクション型があれば、クエリがボトルネックになっているかどうかもすぐにわかります。クエリをコレクション型のクラスに組み込んでおけば、<code>ArrayList</code> などにクライアントが直接アクセスするといった方法は採らずに済みます。そうすれば、クライアントに影響を与えることなく、実装に変更を加えることもできるようになります。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">public</span> <span class="kw">class</span> CustomerList {</a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="kw">private</span> <span class="bu">ArrayList</span>&lt;Customer&gt; customers = <span class="kw">new</span> <span class="bu">ArrayList</span>&lt;Customer&gt;();</a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="kw">private</span> SortedList&lt;Customer&gt; customersSortedBySpendingLevel =</a>
<a class="sourceLine" id="cb2-4" title="4">        <span class="kw">new</span> SortedList&lt;Customer&gt;();</a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="co">// ...</span></a>
<a class="sourceLine" id="cb2-6" title="6">    <span class="kw">public</span> CustomerList <span class="fu">findCustomersThatSpendAtLeast</span>(Money amoun) {</a>
<a class="sourceLine" id="cb2-7" title="7">        <span class="kw">return</span> <span class="kw">new</span> <span class="fu">CustomerList</span>(</a>
<a class="sourceLine" id="cb2-8" title="8">            customersSortedBySpendingLevel.<span class="fu">elementsLargerThan</span>(amount));</a>
<a class="sourceLine" id="cb2-9" title="9">    }</a>
<a class="sourceLine" id="cb2-10" title="10">}</a>
<a class="sourceLine" id="cb2-11" title="11"><span class="kw">public</span> <span class="kw">class</span> UsageExample {</a>
<a class="sourceLine" id="cb2-12" title="12">    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args){</a>
<a class="sourceLine" id="cb2-13" title="13">        CustomerList customers = <span class="kw">new</span> <span class="fu">CustomerList</span>();</a>
<a class="sourceLine" id="cb2-14" title="14">        <span class="co">// ...</span></a>
<a class="sourceLine" id="cb2-15" title="15">        CustomerList customersOfInterest =</a>
<a class="sourceLine" id="cb2-16" title="16">            customers.<span class="fu">findCustomersThatSpendAtLeast</span>(someMinimalAmount);</a>
<a class="sourceLine" id="cb2-17" title="17">        <span class="co">// ...</span></a>
<a class="sourceLine" id="cb2-18" title="18">    }</a>
<a class="sourceLine" id="cb2-19" title="19">}</a></code></pre></div>
<p>　上の例では、DRY 原則を守ることで、顧客の支出金額のレベルをキーとする <code>SortedList</code> を利用して、新たなインデックススキームが導入できました。しかしそれよりも重要なことは、DRY 原則を守ることで、パフォーマンスのボトルネックの発見と解消が、WET なコードの場合より容易になっているということです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog085.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">インデックス</a></li>
<li class="next-article"><a href="prog087.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
