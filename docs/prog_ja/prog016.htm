<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【16】コメントについてのコメント - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【16】コメントについてのコメント">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog016.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e16">【16】コメントについてのコメント</h1>
<div class="author">
カル・エヴァンス（Cal Evans）
</div>
<p>　私が大学に入ったばかりの頃の話です。プログラミングの授業の 1 時間目、先生から BASIC のコーディングシートが 2 枚配られ、黒板には「ボウリングのスコアを 10 個入力し、平均を求めるプログラムを書け」という指示が書かれました。それだけ書くと先生は教室を出て行ってしまいました。そんなに難しい課題ではありません。最終的にどんなコードを書いたかは忘れましたが、<code>FOR/NEXT</code> ループを使って書いて、全部で 15 行あるかないかだったと思います。若い人は「コーディングシート」と言われてもわからないかもしれません。昔は、まずコードを紙に手で書いてからコンピュータに入力していたのです——1 回に入力できる量は 70 行くらいに制限されていました。その時は、どうしてシートを 2 枚渡されたのかわからずに戸惑ったのを覚えています。よくわからないので、1 枚目に下書きをして、2 枚目に清書をすることにしました（私は字が恐ろしく汚いのです）。きれいにかけているということで少しは評価もあがるかな、と期待もしていました。</p>
<p>　次の授業のはじめに課題が返ってきたのですが、見て驚きました。合格点ぎりぎりの評価だったのです（後から思うと、それは私の大学生活を暗示していたのかもしれません）。そして、私がせっかくきれいに書いたコードの上には、こう走り書きしてありました。「コメントは入れないのですか？」</p>
<p>　そのコードがどういうもので、どういう目的で書いたものなのかは、もちろん先生と私にはよくわかっていました。しかし、その 2 人だけがわかればいい、というものではなかったのです。その課題で私が学んだのは「コードは、次に見る人がすぐに理解できるように書く」ということでした。これは今後も決して忘れることはないでしょう。</p>
<p>　コメントは悪ではありません。有用なものです。そして分岐やループなどと同様、プログラミングには必須の要素と言えます。ある程度以上新しいプログラミング言語には、一定の形式で書かれたコメントを基に自動的に API ドキュメントを生成するツール（例：javadoc）などが用意されています。まず始めにこういうツールを利用するのが良いでしょう。しかし、それだけではまだ十分とは言えません。プログラムのコードには「このコードはどういう目的で書かれたものか」の説明をするコメントを入れるべきなのです。「書くのに苦労したコードは、読むのにも苦労する」という格言がありますが、読むのに苦労するようなコードを、コメントもつけずに放置すれば、顧客にも、自分の働く会社にも、同僚にも、そして将来の自分にも害を及ぼすことになります。</p>
<p>　ただし、コメントは多く入れればいいというものではありません。コメントを入れるのは、あくまでコードをわかりやすくするためです。コメントを入れたことでかえってコードがわかりにくくなっては意味がないのです。必要にして十分な量のコメントを、適切な場所に入れること。「このコードで何がしたいのか」を読む人にわかってもらうこと、それが大事です。まずヘッダコメントには「プログラマがコード本体をまったく読まなくても利用することはできる」というくらいの情報を盛り込みます。そしてインラインコメントには、自分の次にコードを見て修正や拡張をする人の助けとなるような情報を適宜盛り込みましょう。</p>
<p>　随分前ですが、こんなことがありました。その時、私は上の人間に腹を立てていました。あるコードに関して彼らが採用を決めた設計がどうしても良いと思えなかったからです。若いプログラマにはありがちなことです。その設計を使用せよ、ということはメールで指示されたのですが、怒りのあまり、私はそのメールの文面をコードのヘッダコメントにコピー＆ペーストしてしまいました。そして後になって、そのコードをコミット後にレビューするのは、まさにメールを送ってきた上司である、ということがわかったのです。そのとき初めて、CLM（Career-Limiting Move：出世の妨げとなるような行動）という言葉の意味が実感を伴って理解できたのでした。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog015.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog017.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
