<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【12】コードは設計である - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【12】コードは設計である | プログラマが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog012.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e12">【12】コードは設計である</h1>
<div class="author">
ライアン・ブラッシュ（Ryan Brush）
</div>
<p>　想像してみてください。ある朝目覚めた時、建設業の世界に世紀の大革命が起きていたとしたら。信じがたいほど仕事が速く、コストの安いロボットたちがすべての作業をしてくれるようになっていたとしたら。ロボットたちは素材をなにもないところから合成できる上、動くためのエネルギーコストもほぼゼロです。そしてなにか不具合があっても自分で自分を修理できます。さらに素晴らしいのは、正確な図面をこちらで用意する必要がないということです。おおまかな青写真さえ渡しておけば、ロボットたちはそれを元に人間の介入なしに作業ができるのです。つまり建設コストを無視できるほど小さくできるということです。</p>
<p>　もしそんなことが起きたら、建設業者にどれほどの影響が及ぼすかはすぐにわかるでしょう。影響は実際の建設を行う施工業者だけにとどまりません。さらに「上流」にも影響は及ぶでしょう。施工のコストがゼロに近くなった時、建築士、設計士と呼ばれる人たちの仕事はどう変わるでしょうか。今はまだ、ある建設プロジェクトに投資するか否かを決める前に、物理的な模型を作るか、コンピュータでモデルを作るかして、事前に細かく検討を重ねる必要があります。しかし、施工のコストが実質上ゼロになったとしたら、誰がわざわざそんなことをするでしょうか。設計がずさんで途中で工事がうまく行かなくなってもどこが問題だったのかを確かめ、また魔法のロボットたちにゼロから新しい建物を作らせればいいだけなら大した問題ではありません。事前に模型やモデルを作るようなやり方は廃れることになります。代わりに、十分な設計をしないまま作り始め、何度も失敗しながら改良を重ね、徐々に完成に近づけていく、というやり方が主流になります。そういうやり方をしたとしても、少なくともできあがったものの表面だけを見る限り、設計を十分にしてから作り始めた場合との違いはほとんどわからないでしょう。</p>
<p>　作業にどのくらい時間を要するか、事前に予測するようなことは急激に減るに違いありません。建設にかかるコストは、設計にかかるコストよりも容易に計算できます——建設コストは、資材や部品の単価、組み立て作業にかかるコストなどが判れば、あとはそれを掛け算、足し算するだけでだいたいわかるからです。そして、この計算しやすいコストが限りなくゼロに近づいていくとしたら、コストの読みにくい設計作業に時間をかけるインパクトが相対的に大きくなるでしょう。その結果、設計には時間をかけずとにかく早く作る、という方法が採られるようになり、作業がいつからいつまでかかるのかを正確に予測してスケジュールを立てるよいう方法は採られなくなります。</p>
<p>　もちろん、資本主義社会ですから厳しい競争原理はそのまま残ります。建築コストが事実上ゼロになれば、その後は、設計の作業をほかより早く完了させられる企業が市場で優位に立つでしょう。設計の早さが、企業の競争力の源泉になるわけです。できあがったものを設計に詳しくない人間が見ても、設計が良いか悪いかはよくわかりません。早くできる方が明らかに有利だとなれば、必然的に、素人目にわかるような問題がなければよしとされることが増えるでしょう。</p>
<p>　人の生死に関わるようなプロジェクトでは、もっと慎重な設計が行われることもあると思います。しかし、多くの場合、十分な設計はなされず、そのせいで消費者が苦しむことが増えます。購入した建物にあれこれ問題が起きるからです。でも、企業側は、ロボットさえ派遣してしまえば、安く簡単に修理、修復できるのでそれでよいと考えます。結局、建設コストの劇的な低下により <strong>品質が低下する</strong> という、直感に反した事態を招くことになってしまうのです。</p>
<p>　本書の読者は、この話を聞いても驚かないかもしれません。同じことはすでにソフトウェアの世界で起きているからです。私たちは、「コードを書くことは設計をすることである」ということ——機械的な作業などではなく、創造的な仕事なのだということ——を肝に銘じる必要があります。それをよく考えれば、 <strong>ソフトウェア開発がなぜ今、危機に陥ってるのか</strong> 、その理由がわかるでしょう。 <strong>何より危機に陥っているのは設計です</strong> 。作る人間の能力を超えるほどの高度な製品、複雑な設計が求められていて、しかも製品を早く市場に出せという圧力が強いような状況では、設計が不十分なまま製品が作られることがどうしても多くなるのです。</p>
<p>　はたしてどうすればいいのでしょう。ヒントは、先に書いた建設業の世界にあるのではないか、と私は思います。建設の世界では「模型」を作りますが、これはソフトウェア開発における「自動テスト」にあたると考えます。多数の過酷なテストに耐えるものであると証明されない限り、設計が完了したとはみなさないようにするのです。テストをより有効なものにするためには、大規模システムの巨大な状態空間に圧倒されないような方法を考える必要がありますが、言語や設計手法の改善を図れば、きっと希望が見えてくるでしょう。決して忘れてはならないのは、優れた設計には優れた設計のできる「人間」が要る、ということです。そういう人間になるためには、技術の習得のため相当の努力が必要になります。コーディング能力も例外ではありません。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog011.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog013.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
