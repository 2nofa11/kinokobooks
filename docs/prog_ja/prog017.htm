<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【17】コードに書けないことのみをコメントにする - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【17】コードに書けないことのみをコメントにする | プログラマが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog017.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e17">【17】コードに書けないことのみをコメントにする</h1>
<div class="author">
ケブリン・ヘニー（Kevlin Henney）
</div>
<p>　「理論と実践は違う」とよく言われますが、その違いは、自分で何かを実践してみると本当によくわかります——これは、コードにつけるコメントについても当てはまることです。コードにコメントをつけるのは、理論的には良いこととされています。「これはどういう処理をするコードなのか」をコメントで詳しく説明するのは、良いこと、役に立つこととされているのです。しかし実際には、コメントを入れたことがかえって害になる場合もよくあるのです。世の中には「文章術」というものがありますが、コメントにも良いコメントを書くための文章術があるのです。中でも特に大事なのは、コメントに「書かなくてよいこと」を見極める技術でしょう。</p>
<p>　文法的に誤ったコードを書けば、コンパイラやインタープリタ等のツールがエラーを発生させ、それを知らせてくれます。またコードに機能的な問題があれば、レビューや静的分析で発見されることもあるし、製品になってユーザが日々使う中で発見されることもあります。しかし、コメントはどうでしょうか。『プログラム書法』という本の中で、著者の Kernighan と Plauger は「たとえコメントを入れても、それが不適切なものであれば価値はゼロ（あるいはマイナス）である」と述べています。そして、そうした不適切なコメントは不適切なコードとは違い、修正されたり削除されたりすることは少なく、コードベースにいつまでも残ってしまうことが多いのです。不適切なコメントが残っていれば、誰かがコードを見る度に集中力が削がれたり、誤った情報を与えてしまうことさえあります。ほんのわずかでも、絶えず、プログラマにとって思考の妨げとなってしまうわけです。</p>
<p>　書いていることが技術的に誤っているわけではないが、コードに何か価値を加えるわけでもない、そういうコメントは、一種の「ノイズ」とみなすことができます。コードに書かれていることをただオウム返しにするだけで、何の情報もつけ加えていないコメントはノイズでしょう——プログラミング言語で一度書いたことを、もう一度自然言語で言ったからといって、正しさが増すなどということはありません。コメントの部分は、実行されるわけではないので、ノイズのようなコメントは、コードを読む時にも実行する時にも、まったく役に立たないわけです。また、コメントの内容は、あっという間に陳腐化する、という点にも注意が必要です。たとえば、コードがどのバージョンなのかを知らせるコメントや、「どのバージョンでどういう修正を加えたか」という履歴を入れてコメントアウトされたコードなどがよくありますが、そのような情報はバージョン管理システムを使えば（はるかに合理的に）得ることができます。</p>
<p>　ノイズのようなコメント、情報の誤ったコメントがコードベースに大量にあると、やがてプログラマはコメントのすべてを無視するようになります。ただ読み飛ばすという人もいれば、コメントが画面から消えるよう対策を講じる人もいます。プログラマという人種は皆、問題を回避することに長けています。自分にとって害になり得るものの存在を察知すれば、すぐにそれを避ける方法を見つけ出します。コメントの部分を「折り畳める」ようにしたり、あるいはコメント部分の色を背景と同じにして見えなくしてしまうこともできます。コメントをフィルタリングするスクリプトを書く人もいるでしょう。しかし、プログラマのせっかくの能力をそんなことに使うのは無駄です。それに中には本当に価値のある、重要なコメントもあるはずなので、それを見逃すのは問題です。こういう問題を防ぐには、コメントを通常のコードとまったく同じように考えて扱うことが重要になってきます。すべてのコメントを読む人にとって価値のあるものにし、そうでないものは即座に削除するか書き直すべきであるということです。</p>
<p>　「読む人にとって価値がある」とは具体的にはどういう意味でしょうか。それは、コードには書いていないことや、コードには書けないことが書いてある、ということです。本来コードを見ればわかるはずのことをコメントに書かなくてはならないのは、コードの構造や書き方を見直す必要があるということです。メソッドやクラスの名前がわかりにくいからコメントを書くというのなら、名前を変えてしまった方がいいでしょう。関数が長くて分かりにくいせいでコメントが要るのなら、関数を小さく分割して、どういう関数かがすぐに分かる名前を個々につける方がいいでしょう。コード自身にできる限り「語らせる」ようにするのです。どうしてもコードに語らせることが不可能な時に、語らせたかったものとコードとのギャップをこそコメントに書くのです。コードに「書いていないこと」ではなく、コードに「書けないこと」のみをコメントにするのです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog016.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog018.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
