<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【32】浮動小数点数は実数ではない - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【32】浮動小数点数は実数ではない">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog032.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e32">【32】浮動小数点数は実数ではない</h1>
<div class="author">
チャック・アリソン（Chuck Allison）
</div>
<p>　浮動小数点数は、数学でいうところの「実数」とは違います。Pascal や Fortran など、プログラミング言語によっては「実数」という名前で呼ばれることもありますが、厳密には実数ではないのです。実数は、まず精度が無限です。完全に連続していて、「桁落ち」もありません。一方、浮動小数点数の精度は有限です。実数というよりは、むしろ整数に近いと言っていいでしょう。いわば「非常に奇妙な整数」です。「非常に奇妙」というのは、数と数の間隔が、通常の整数とは違って均等ではないからです。</p>
<p>　たとえば、「2147483647」という数（符号付き 32 ビット整数の最大値）を、32 ビットの浮動小数点型変数（仮に <code>x</code> とします）に代入し、<code>x</code> の値を出力したとします。すると、その結果は「2147483648」となります。<code>x-64</code> を出力しても、結果はやはり「2147483648」になり、<code>x-65</code> を出力すると、結果は何と「2147483520」になってしまいます。なぜでしょうか？　それは、この範囲では、数の間隔が「128」になっていて、浮動小数点数の演算では、最も近い数値への「丸め」が行われるためです。</p>
<p>　IEEE の規格で定められた浮動小数点数は、基数を 2 つとした科学的記数法で表現されます。この記数法では、たとえば「1.d<sub>1</sub>d<sub>2</sub>…d<sub>p-1</sub>×2<sup>e</sup>」というふうに記されます。<code>p</code> は仮数部の表現に使われるビット数（単精度では 24、倍精度では 53）です。2 つの隣り合う数の間隔は、2<sup>1-p+e</sup> になります。これはほぼ、<code>ε|x|</code> と考えても大きな間違いはないでしょう。<code>ε</code> はマシンイプシロン (2<sup>1-p</sup>) を表します。</p>
<p>　浮動小数点数において、数と数の間隔がどのようになっているかを正しく把握しておけば、「演算結果が想定と大きく異なってしまう」という起こりがちな間違いを防ぐことができます。たとえば、方程式の根の探索などのような反復計算の際、定められた以上の精度を求めるようなコードを書いても意味はありません。数と数の間隔が広すぎれば、永久に求める答えは得られず、無限ループに陥ってしまいます。</p>
<p>　浮動小数点数は、実数の近似値です。つまり、誤差が生じることは避けられないということです。「丸め」によって生じる誤差が原因で、演算結果が予測とまったく違って驚くことは珍しくないのです。たとえば、ほとんど同じ大きさの数値どうしの減算をしたとします。その場合、最上位の桁は、互いに相殺し合い、最下位の桁にあった数（丸めによる誤差を含んだ数）が最上位の桁にまで繰り上がる、ということが起きます。この演算結果を踏まえてさらに演算を重ねていくと、誤差はどんどん大きくなっていってしまいます。こういう悲惨な結果を防ぐには、自分の書いたコードのアルゴリズムをよく確認する必要があります。例を 1 つあげておきましょう。方程式「x<sup>2</sup> - 100000x + 1 = 0」を、二次方程式の解の公式を使って解くとします。この場合、式「-b + sqrt(b<sup>2</sup> - 4)」のオペランドの大きさはいずれもほぼ同じなので、代わりに、根「r<sub>1</sub> = -b - sqrt(b<sup>2</sup> - 4)」を計算して、その後に r<sub>2</sub> = 1/r<sub>1</sub> を求めることができます。二次方程式「ax<sup>2</sup> + bx + c = 0」の場合、根は必ず「r<sub>1</sub>r<sub>2</sub> = c/a」を満たします。</p>
<p>　誤差が大きくなっていくという現象は、もっと目立たないかたちで起きることもあります。仮に、e<sup>x</sup> を、単純に「1 + x + x<sup>2</sup>/2 + x<sup>3</sup>/3! + ……」という式で計算するライブラリがあったとします。x が正の数であれば、この方法でも問題は起きないのですが、もし x が絶対値の大きい負の数であったらどうなるかを考えてみましょう。その場合は、偶数番目の項の演算結果は大きな正の数になり、そこから、奇数番目の項の演算結果を差し引くことになります。それだけでは特に誤差が生じるわけではありません。ただ問題は、偶数番目の項の演算結果に対する丸めです。演算結果が大きな数であれば、かなり上位の桁で丸めが行われてしまうのです。このことから、最終的な演算結果は、正の無限大に向かって大きくなり、本来得られるべき結果とは大きく異なってしまいます。この問題を解決する方法は簡単です。x が負の数の場合は e<sup>x</sup> = 1/e<sup>|x|</sup> を計算するようにすればいいのです。</p>
<p>　最後に、金融関係のアプリケーションには浮動小数点数を使うべきではないということも書いておくべきでしょう。Python や C# に、Decimal クラスが用意されているのはそのためです。浮動小数点数は、元々、科学技術計算を効率的に行うことを目的としたものです。しかし、正確さを欠いていては、効率がいくら良くても価値はありません。浮動小数点数を使う時は、どういう時に丸めの誤差が出るかをよく知り、その知識を踏まえた上でコーディングをすべきです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog031.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog033.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
