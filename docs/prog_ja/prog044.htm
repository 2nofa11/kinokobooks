<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【44】IDE を知る - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【44】IDE を知る | プログラマが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog044.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e44">【44】IDE を知る<span id="color-scheme"></span></h1>
<div class="author">
ハインツ・カブーズ（Heinz Kabutz）
</div>
<p>　1980 年代に「プログラミング環境」と言えば、ほとんどのプログラマにとって、あの素晴らしき「テキストエディタ」だけでした。どれほど恵まれているプログラマでも同じ状況でした。最近では当たり前の機能のように思われているシンタックスハイライトですら贅沢で、誰もが使えるというわけではありませんでした。コードをきれいにフォーマットする機能は外部ツールになっていたので、プログラマが逐一実行する必要がありました。コードを 1 ステップずつ実行するデバッガもやはり外部ツールで、使う際には、暗号のようなコマンドをたくさん打ち込まねばならなかったのです。</p>
<p>　1990 年代になると、プログラミング用のツールを売れば大きな利益につながるということを企業が認識し始めました。それで生まれたのがいわゆる IDE（Integrated Development Environment：統合開発環境）です。これは簡単に言えば、従来から広く使われていたテキストエディタに、コンパイラ、デバッガ、コードフォーマッタなどのツールの機能を組み込んだようなものです。また IDE が生まれる頃には、マウスやメニューを使う GUI が一般化していたので、暗号のようなコマンドを覚える必要もなくなりました。マウスを使ってメニューを選べば操作できるようになったのです。</p>
<p>　21 世紀には、IDE は当たり前の存在になり、他の分野でのマーケットシェアを獲得するために IDE を無料配布する企業も増えました。最新の IDE は、驚くほど機能が豊富です。私が気に入っているのは、自動リファクタリング機能、中でも「メソッドの抽出」という機能です。これはメソッド中の一部のコードを選ぶと、その部分を新たなメソッドとして切り出してくれる機能です。どういうパラメータを渡すべきかもすべてツールが自動的に判断してくれるので、非常に簡単にコード編集を行うことができます。私が使っている IDE には、新たに作ったメソッドで置換可能な箇所が既存コードの中にないか探す機能もあります。もし見つかれば、置換するか否かをこちらに尋ねてくれます。</p>
<p>　最新の IDE には、社内のコーディング規約を強制的に守らせる機能もあります。たとえば Java の場合「すべてのパラメータを <code>final</code> 宣言すること」というルールが定められている企業もあります。この種のルールを守るのはかなり大変で、私は個人的に時間の無駄ではないか、とも思います。IDE にルールの強制機能があれば事情は変わってきます。あらかじめ「こういうルールがある」と設定しておけば、常に気をつけている必要はなくなるからです。もし <code>final</code> 宣言していないパラメータがあれば、警告を出してくれるでしょう。この機能はバグの検出にも役立ちます。たとえばオートボクシングされたオブジェクトの比較に“==”を使用している箇所の自動検出などは有効でしょう。プリミティブ型の値がラッパークラスにオートボクシングされた場合、“==”を使うと、値が同一かではなくインスタンスが同ーかが比較されてしまうため、バグの可能性が高いのです。</p>
<p>　幸か不幸か、今や IDE は使うのに訓練や学習をほとんど必要としないものになっています。私がはじめて UNIX マシンで C のプログラミングをした時は、vi エディタを使う必要があり、その使い方を習得するのにかなりの時間を要しました。vi エディタの学習曲線は、かなりの急勾配と言えるでしょう。いったんコツがわかると急激に理解が進むのですが、最初の段階では非常に苦労をするのです。しかし苦労して身につけた技術は、その後ずっと役立ってくれているので、苦労は十分報われたと言えます。実際この原稿を書くのにも vi を使っています。反対に IDE の学習曲線は非常に緩やかです。苦労せずに使い始められるのですが、その後はなかなか上達しないことが多いのです。長い間、基本的な使い方しか知らないという状態が続いてしまいます。</p>
<p>　私は新しい IDE について学ぶ時は最初にキーボードショートカットを覚えるようにしています。たとえば、コーディング中、変数をインライン化する必要が生じたとします。もちろんメニュー操作でそれはできるのですが、キーボードから手を離してマウスを持つと、それで思考の流れが中断してしまいます。Ctrl+Shift+I というショートカットを覚えていれば、マウスを使う必要がなく、思考の流れを中断せずに作業が進められます。マウスをずっと使っていれば、ショートカットを覚える必要もなく楽ですが、集中力が何度も途切れる分、生産性は低下してしまいます。同様のことはタッチタイピングにも言えます。タッチタイピングは習得するのに時間もかかり、最初は大変ですが、習得することで得られる利益の大きさを考えれば、最初の苦労は何でもないでしょう。</p>
<p>　最後に、私たちプログラマには UNIX があります。UNIX には、習得は容易ではないが、一度習得してしまえばコーディング作業の効率化に非常に役立つツールが多数あります。たとえば、コードレビューで「システム中に同じ名前のクラスが多数あるらしい」と気づいたとします。その場合、実際に同じ名前のクラスがどのくらいあるかは、次のように <code>find</code>、<code>sed</code>、<code>sort</code>、<code>uniq</code>、<code>grep</code> といったツールを使えば簡単に確認できます。</p>
<pre class="shell-session"><code>find . -name &quot;*.java&quot; | sed &#39;s/.*\///&#39; | sort | uniq -c | grep -v &quot;^*1&quot; | sort -r</code></pre>
<p>　家に修理に来る配管工はブロートーチ（簡易型溶接機）という専門の道具を当然使えるはずです。IDE は今やプログラマにとってのブロートーチかもしれません。今後は、IDE をどう使えば生産性を上げられるか、時間をかけて学んでいくべきでしょう。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>

<div>
    <a class="sns-button" href="https://twitter.com/share?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog044.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/twitter.svg"></a>
    <a class="sns-button" href="https://www.facebook.com/share.php?u=https://yoshi389111.github.io/kinokobooks/prog_ja/prog044.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/facebook.svg"></a>
    <a class="sns-button" href="https://b.hatena.ne.jp/add?mode=confirm&url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog044.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/hatebu.svg"></a>
    <a class="sns-button" href="https://getpocket.com/edit?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog044.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/pocket.svg"></a>
</div>

<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog043.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog045.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
