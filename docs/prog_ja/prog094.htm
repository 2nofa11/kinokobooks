<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【94】リンカは魔法のプログラムではない - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【94】リンカは魔法のプログラムではない">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog094.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; left: -4em; }
pre.numberSource a.sourceLine::before
  { content: attr(title);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<article>
<h1 id="e94">【94】リンカは魔法のプログラムではない</h1>
<div class="author">
ウォルター・ブライト（Walter Bright）
</div>
<p>　コンパイルが必要な言語においては、ソースコードを静的にリンクされた実行ファイルに変換するプロセスが発生します。愕然とするのは、そのプロセスについてごく浅い認識しか持っていないプログラマが意外に多いということです（つい最近も、それを思い知らされる出来事がありました）。読者の中にも、こんな認識の人がいるのではないでしょうか。</p>
<ol type="1">
<li>ソースコードを編集する。</li>
<li>ソースコードをコンパイルすると、オブジェクトファイルが作成される。</li>
<li>何やら不思議な処理が行われる。</li>
<li>実行ファイルができる。</li>
</ol>
<p>　ステップ 3 で行われるのは、もちろん「リンク」です。何を当たり前のことを、と言う人もいるかもしれません。わざわざこんなバカげたことを言うのには理由があります。私は何十年もテクニカルサポートの仕事をしてきたのですが、次のような質問を受けることが実に多いのです。</p>
<ol type="1">
<li>リンカが「<code>def</code> が 2 度以上定義されている」というメッセージを出すが、どうすればいいか。</li>
<li>リンカが「<code>abc</code> は未解決シンボルである」というメッセージを出すが、どうすればいいか。</li>
<li>実行ファイルが異常に大きくなってしまう。その理由がわからない。</li>
</ol>
<p>　こういう質問をする人の話を聞いていると、「……みたいです」、「どういうわけか」という類の言い回しが多いのに気づきます。困惑しているというのがよくわかります。こういう言葉を使うのは、リンクのプロセスを何だか得体の知れない、一種の「魔法」と思っているからでしょう。どうやら超人的な知識と技術を持った専門家にしか理解できないものと捉えているようです。コンパイルの話だと、こういう話し方をする人はまずいないのです。コンパイラなら、少なくとも何をしているか、だいたいのことはわかると思っているのでしょう。</p>
<p>　リンカは実はさほど難しいプログラムではありません。むしろ単純でわかりやすいプログラムです。することといえば、オブジェクトファイルのコードセクション、データセクションを連結し、定義されているシンボルと参照を接続し、ライブラリから未解決シンボルを抽出し、実行ファイルを書き出す、それだけです。とても単純で、魔法でも何でもありません。なぜリンカが難しく感じるかといえば、処理の結果できるファイルのフォーマットが驚くほど複雑で、そのままで解読することは難しいからでしょう。だからと言って、リンカ自体が複雑な処理をしているというわけではないのです。</p>
<p>　それでは、リンカが、「<code>def</code> が 2 度以上定義されている」というメッセージを出すのはなぜでしょうか。プログラミング言語の中には、C、C++、D などのように、「宣言」と「定義」の両方を行う、というものが数多くあります。「宣言」は、通常、以下のように、ヘッダファイルで行われます。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">extern</span> <span class="dt">int</span> iii;</a></code></pre></div>
<p>　この宣言により、シンボル <code>iii</code> への外部参照が生成されることになります。一方、「定義」の場合は、実際にシンボルに対応する記憶領域が確保されます。定義は、通常は実装ファイルの中で、以下のように行われます。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb2-1" title="1"><span class="dt">int</span> iii = <span class="dv">3</span>;</a></code></pre></div>
<p>　シンボル 1 つにつき、定義はいくつまで可能なのでしょうか。映画『ハイランダー／悪魔の戦士』ふうに言えば、「1 つでしかあり得ない」ということになります。では、以下のように、<code>iii</code> の定義が実装ファイルに複数あった場合にはどうなるのでしょうか。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb3-1" title="1"><span class="co">// File a.c</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="dt">int</span> iii = <span class="dv">3</span>;</a>
<a class="sourceLine" id="cb3-3" title="3"><span class="co">// File b.c</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="dt">double</span> iii(<span class="dt">int</span> x) { <span class="cf">return</span> <span class="fl">3.7</span>; }</a></code></pre></div>
<p>　この場合は、リンカが「<code>iii</code> が 2 度以上定義されている」というエラーメッセージを出すことになります。</p>
<p>　定義は「1 つでしかあり得ない」ものですが、一方で「絶対に 1 つは必要」なものです。もし <code>iii</code> が宣言のみで、一度も定義されていなければ、リンカは「<code>iii</code> は未解決シンボルである」というエラーメッセージを出します。</p>
<p>　実行ファイルが異常に大きくなる理由は、リンカがオプションで生成するマップファイルを見るとわかります。マップファイルは、実行ファイル中の全シンボルとそのアドレスの単なるリストです。マップファイルを見れば、どんなライブラリモジュールがリンクされているか、またそれぞれのモジュールのサイズはどれくらいかもわかります。つまり、実行ファイルのサイズが大きくなっている原因がどのモジュールにあるかがわかるわけです。時には「なぜこのライブラリモジュールがリンクされているのか理由がまったくわからない」というものが見つかることもあります。理由を知るには、そのモジュールをいったんライブラリから削除して、リンクをし直してみる、という方法が有効です。そうすれば、「シンボルが定義されていない」というエラーが出るでしょう。そのエラーを見れば、モジュールがどこで参照されているのかがわかるはずです。</p>
<p>　リンカがメッセージを出した時、その原因がすぐにはわからないことも確かにあります。しかし、それでも、リンカが特に複雑な処理をしているわけではないということは常に念頭に置くべきでしょう。処理自体は簡単だけれども、その結果できるものが複雑で、詳しく検証するのがなかなか面倒ということなのです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog093.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog095.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
