<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【70】シングルトンパターンの誘惑に負けない - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【70】シングルトンパターンの誘惑に負けない | プログラマが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog070.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e70">【70】シングルトンパターンの誘惑に負けない<span id="color-scheme"></span></h1>
<div class="author">
サム・サーリスト（Sam Saariste）
</div>
<p>　シングルトン（Singleton）パターンは多くの問題の解決に役立つパターンです。このパターンでは、クラスのインスタンスは必ず 1 つしか生成されません。そのインスタンスは使用前に必ず初期化されます。そしてシングルトンをグローバルアクセスポイントとすることで、設計をシンプルにできます。こう書いていくと良いことずくめのようですが、この「古典的な」デザインパターンに何か短所はあるのでしょうか。</p>
<p>　実はたくさんあります。それはよく考えてみるとわかります。確かにシングルトンパターンは魅力的なのですが、私の経験では、このパターンには利点よりも弊害の方が多いと言えます。まずテストの妨げになります。そして保守性の点でも不利です。残念ながらその事実は広く知られているとは言えないため、多くのプログラマを惹きつけているのです。つい使いたい誘惑にかられますが、その誘惑に抵抗しなくてはなりません。</p>
<p>　シングルトンパターンに具体的にどんな問題があるかを次にまとめておきます。</p>
<ul>
<li><strong>「必要なインスタンスは 1 つだけ」という要望は、多くの場合推測にすぎない。</strong> クラスを作った時には「インスタンスは絶対に 1 つしかいらないだろう」と考えていても、後にそうもいかなくなることが多いのです。アプリケーションを設計する時にそういう推測をあちこちでしていると、どこかで大きな問題に直面することになります。要件は変化するものです。良いデザインとは、それを織り込んでいるもののことを言います。シングルトンパターンは、要件の変化を織り込んでいるとは言えません。</li>
<li><strong>理論的には独立しているはずのコード間に暗黙の依存関係を生んでしまう。</strong> これが問題なのは、まず依存関係が一見してわかりにくいからです。また、生まれてしまう依存関係は、本来不必要なはずです。問題の存在がはっきりするのは、ユニットテストの時です。ユニットテストは疎結合が前提となっていて、また「本物の」実装コードの代わりに、適宜モック（テスト用の偽者）実装に差し替えられることも重要だからです。シングルトンパターンはその妨げになるのです。</li>
<li><strong>シングルトンパターンは永続化された状態を暗黙のうちに伴う。</strong> これも、ユニットテストの妨げになります。ユニットテストは、どのような順序でもテストが実行できるために、互いに独立でなければなりません。そしてどのテストにおいても、実行前には必ず、プログラムを既知の状態に設定できるはずなのです。不変でない状態を伴うシングルトンを導入してしまうと、それが難しくなります。加えて、グローバルにアクセス可能で、かつ永続化された状態があると、コードから状態の推論が困難になります。特に、マルチスレッド環境でそれは顕著です。</li>
<li><strong>マルチスレッド環境での使用は特に危険が大きい。</strong> マルチスレッドでは、シングルトンオブジェクトへのアクセスにはロックが必要になりますが、単純なロックでは効率が良いとは言えないため、いわゆる DCLP（Double-Checked Lockingパターン）を使うことが増えています。しかし困ったことに、これだと危険性が高まってしまう恐れがあります。多くの言語で、DCLP はスレッドセーフでないということがわかっているからです。にもかかわらず、少し誤解され、魅力的に見えてしまうことがあるのです。</li>
</ul>
<p>　シングルトンは、クリーンアップに関しても問題を起こしやすいと言えます。</p>
<ul>
<li><strong>シングルトンを明示的に殺すための機能はありません。</strong> これは場合によっては深刻な問題となります。たとえば、すべてのオブジェクトをクリーンアップするまで安全にアンロードできない、というプラグインアーキテクチャのプラグインにとっては大きな問題でしょう。</li>
<li><strong>プログラム終了の際には、シングルトンも自動的にクリーンアップされることになります。</strong> ただし、複数のシングルトンがある時、どのような順序でクリーンアップされるかは決まっていません。相互に依存し合うシングルトンがアプリケーションに含まれている時、これは問題になります。アプリケーションのシャットダウン時に、あるシングルトンが別のシングルトンにアクセスしようとするけれど、そのシングルトンはすでにクリーンアップされてしまっている、という事態になる恐れがあるからです。</li>
</ul>
<p>　シングルトンの欠点の中には、ある種のメカニズムを付加することで克服できるものもあります。しかし、それによってコードはどうしても複雑になってしまいます。シングルトンパターンさえ選択しなければ、そういう心配はいらないのです。</p>
<p>　シングルトンパターンは、必要なインスタンスが絶対に 1 つだけと確信できるクラス以外では使うべきではないでしょう。そして、シングルトンをグローバルアクセスポイントとすることも避けるべきです。グローバルアクセスポイントになってどこからアクセスされるかわからないというのは良くないのです。シングルトンへの直接のアクセスは、あらかじめ定めておいたごく少数の箇所からのみ行うようにします。そして他のコードからは、インタフェースを通じてアクセスするのです。他のコードは、そのインタフェースを実装するのがシングルトンなのか、あるいは他の種類のクラスなのか、ということには関知しません。つまりシングルトンに依存しないのです。それにより、ユニットテストの妨げとなる依存関係も生じずに済み、保守性も向上します。今後、シングルトンの実装やシングルトンへのアクセスを検討する時があれば、いったん立ち止まって、ここに書いたようなことをじっくり考えてみてください。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>

<div>
    <a class="sns-button" href="https://twitter.com/share?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog070.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/twitter.svg"></a>
    <a class="sns-button" href="https://www.facebook.com/share.php?u=https://yoshi389111.github.io/kinokobooks/prog_ja/prog070.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/facebook.svg"></a>
    <a class="sns-button" href="https://b.hatena.ne.jp/add?mode=confirm&url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog070.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/hatebu.svg"></a>
    <a class="sns-button" href="https://getpocket.com/edit?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog070.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/pocket.svg"></a>
</div>

<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog069.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog071.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
