<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【03】ルーチンワークをフローのきっかけに - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【03】ルーチンワークをフローのきっかけに">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog103.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="j03">【03】ルーチンワークをフローのきっかけに</h1>
<div class="author">
宮川 達彦
</div>
<p>　ソフトウェア・エンジニアやプログラマはよくアーティストに例えられます。ある人は 2 時間だけのコーディングで、他の人の 8 時間分の成果をあげることができます。また、コードの長さは必ずしもその品質やデザインの美しさ、メンテナンス性の高さには比例しません。あるプログラマが朝 9 時に出社し、夕方 6 時に退社するとしても、その間ランチをのぞいた 8 時間、つねにターミナルやエディタを開いてコーディングしつづける、というのはむしろ稀な部類でしょう。</p>
<p>　周りの妨げがなくコーディングに没頭している状態を「フロー状態」と呼びますが、このフロー状態に何の苦労もなく突入できるエンジニアを本当の達人プログラマと呼ぶのかもしれません。何しろ、フローに入るための邪魔や誘惑が多すぎます。受信箱にたまった未読メール、RSS フィードリーダーにたまったニュース、頻繁にポップアップするメッセンジャーや IRC チャット。そして 12 時になれば同僚とのランチ、午後 3 時には多少の眠気とたたかうためのコーヒー。</p>
<p>　こうした誘惑に打ち勝って、ついにエディタやターミナルを開いても、そこからいきなりコードを書き始める、というのもなかなか難しいものです。どんな運動でも準備運動や助走が必要なように、コードを書くという（クリエイティブな！）作業の前にも、そのための準備が必要です。この準備はどんなものでもいいのですが、「ルーチンワーク」をこの準備として利用すると便利なことがあります。</p>
<p>　2 年ほど前の話ですが、私の参加するプロジェクトでは、常時 2 本以上の開発ブランチが走り、また 2 週間に 1 度はそれをマージしてプロダクション環境にリリースする、という開発形態をとっていました。それぞれのブランチで複数人が日々多数のコミットを行っており、2 週間に 1 度だけのマージでは発生するコンフリクトの数が多すぎるという問題がありました。そこで、次回リリース用のブランチを用意し、開発ブランチから毎日マージすることで、コンフリクトの影響を最小にし、また継続インテグレーションによるテストを容易にしよう、ということになりました。</p>
<p>　半年ほど、私がそのマージの担当者となっていた時期がありました。その間、出社して最初にすることは、ターミナルを開き、開発用サーバにログインして各ブランチからリリースブランチへマージを行うという、いわば単純作業です。もちろんシェルスクリプトを書いてある程度の作業は自動化しましたが、コンフリクトが発生したときの確認や、最後にコミットしてレポジトリにプッシュする部分はターミナルで行います。はじめの数日間は、「こんなルーチンワーク、退屈だな。早く自分の担当がおわればいいけど」と考えていましたが、その作業を続けるうちに、それが毎朝、自分の環境でターミナルを開いて、次に来るべきコーディングへの準備になっていることに気づきました。非クリエイティブにも見えるルーチンワークで自分の体や思考パターンを慣らして、かつその作業をしている間はメールなどの誘惑からも自然とシャットアウトし、フロー状態にはいる助走ができているわけです。</p>
<p>　現在ではその日々のマージ作業はバージョン管理ツールの変更や開発形態が変わったことにより、必要なくなりましたが、こうしたルーチンワークを 1 日の最初に行う余地を残しておくことは有用だと思っています。毎日のルーチン作業ではなくても、1 日の終わりに、翌日最初に行うことを決めてメモしておく、とか、あるいはふと思いついた変更のアイデアをコードのコメントとして残しておく、とか。あえて一晩寝かせておくことで、そのアイデアがいいものであるのか、あるいはあまり筋が良くないものであるか、気づくこともあるかもしれません。</p>
<p>　ルーチンワークで時間を無駄にするのはよくないことです。自動化することによって時間やコストを節約し、またマニュアル作業によるミスを減らすことも重要でしょう。ただ、ほんの少しだけ、その作業で手や頭を動かす余地を残しておくのも、プログラマがクリエイティブになる準備としては、悪くないのかもしれません。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog102.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog104.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
