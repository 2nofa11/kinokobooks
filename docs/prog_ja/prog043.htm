<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【43】プログラミング言語は複数習得すべき - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【43】プログラミング言語は複数習得すべき">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog043.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e43">【43】プログラミング言語は複数習得すべき</h1>
<div class="author">
ラッセル・ワインダー（Russel Winder）
</div>
<p>　プログラミング技術の習熟度は、どれだけ多くのプログラミングパラダイムに親しんでいるかによって大きく変わることが知られています。「親しんでいる」とは、名前について知っている、ちょっとかじったことがある、というような程度では駄目で、その言語を使って正しくプログラムを書けるということです。</p>
<p>　はじめから複数の言語を知っているプログラマはいません。だれもが言語を一つずつ習得していくのですが、プログラマのソフトウェアに対する考え方は、どの言語を使用しているかによって大きく左右されます。特に最初に覚えた言語の影響は大きくなります。何年プログラミングを経験しようとも、ずっと同じ言語だけを使い、1 つの言語しか知らないプログラマは、その言語の枠の中でしかものを考えられなくなってしまいます。</p>
<p>　プログラマにとって、新たな言語を学ぶのは、かなり大変なことです。特に、最初に覚えた言語とはパラダイムの異なる言語を第二の言語として習得しようとすれば、そこには困難が伴います。C、Pascal、Fortran などは同じパラダイムなので、たとえば、Fortran を最初に学んだ人が新たに C を学ぶ場合、さほど苦労はしないでしょう。しかし、C や Fortran を使っていた人が C++ や Ada を学ぼうとすれば、おそらく苦労することになるはずです。プログラムの振る舞いに根本的な違いがあるからです。同様に、C++ を使っていた人が Haskell を学ぶことや、C を使っていた人が Prolog を学ぶことも、言語の性質が大きく違っているために困難を伴うでしょう。</p>
<p>　プログラミング言語のパラダイムは大きく、手続き型、オブジェクト指向型、関数型、論理型、データフロー型などに分類することができます。2 番目に学ぶ言語のパラダイムが最初の言語と同じであれば習得は楽ですが、パラダイムが違っていると、習得は困難になります。</p>
<p>　しかし第二の言語には、是非とも、最初の言語とはパラダイムの違う言語を選ぶべきです。それはなぜかというと、パラダイムの違う言語を学ぶと、アルゴリズム、イディオム、パターンの実装について嫌でも考えるようになるからです。同様のアルゴリズムを実装するにしても、色々なやりかたがあり得ることに気づきます。この体験が、プログラマの技術を大きく向上させます。ある問題を解決するのに、言語 A ではこのイディオムを使用するが、言語 B で同じイディオムは使えないというような体験が重要なのです。イディオムを言語 B でも使えるものに移植しようとすれば、両方の言語について、解決する問題について、よく考え学ぶ必要が出てくるからです。</p>
<p>　パラダイムの違う言語を学ぶ効用は他にもたくさんあります。最も顕著な効用は、1 つのパラダイムしか知らなければ思いつかないような表現を使用することができるということです。たとえば、宣言型言語の経験を積んだユーザなら、C のような命令型言語においてもそのパラダイムを使用することができるでしょう。宣言型パラダイムを取り入れることにより、より簡潔で理解しやすいプログラムを書くことが可能になります。C++ などの言語は、初めから様々なパラダイムの語法を使用できるような作りになっています。それらの言語では、様々なパラダイムに関する知識は、むしろ必須のものになっていると言えるでしょう。</p>
<p>　プログラマは少なくとも 2 つのパラダイムの言語を使いこなせるようになるべきです。もちろん、先に触れた 5 つのパラダイムすべての言語を使いこなせるというのが理想です。プログラマは常に新しい言語、特に馴染みのないパラダイムの言語を学ぶ意欲を持つべきでしょう。たとえ日々の業務で使う言語が 1 つだけだったとしても、パラダイムの違う言語を学べば、普段使っている言語をよりうまく使いこなせるようになります。実際に試してみれば効果に驚くことになるはずです。企業もそれを考慮し、社員が新たな言語を学ぶことを奨励すべきでしょう。できれば、そのための予算も確保しておくことが望ましいと言えます。</p>
<p>　ただし、1 週間のトレーニングコースを受ける、という程度の学習では不十分です。良いきっかけにはなるでしょうが、それだけで新たな言語を学んだとは言えません。言語を使いこなせるレベルになるためには、何ヶ月かの間、毎日少しでもその言語に触れる必要があるでしょう。大事なのは、その言語の構文や計算モデルについて知るだけでなく、言語のイディオムを身につけることです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>
</footer>
</body>
</html>
