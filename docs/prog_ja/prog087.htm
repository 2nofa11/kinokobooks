<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" prefix="og: http://ogp.me/ns#" lang="ja" xml:lang="ja" >
<head>
  <meta charset="utf-8" />
  <link rel="stylesheet" href="../css/style_ja.css"/>
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>【87】プログラマとテスターが協力してできること - プログラマが知るべき 97 のこと</title>
  <meta property="og:title" content="【87】プログラマとテスターが協力してできること | プログラマが知るべき 97 のこと">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://yoshi389111.github.io/kinokobooks/images/prog97_ja.png">
  <meta property="og:url" content="https://yoshi389111.github.io/kinokobooks/prog_ja/prog087.htm">
  <meta property="og:site_name" content="プログラマが知るべき 97 のこと">
  <meta property="og:locale" content="ja_JP">
  <script type="text/javascript" src="../js/darkmode.js"></script>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<article>
<h1 id="e87">【87】プログラマとテスターが協力してできること<span id="color-scheme"></span></h1>
<div class="author">
ジャネット・グレゴリー（Janet Gregory）
</div>
<p>　テスターとプログラマが協力し合えば、奇跡が起こせます。両者の協調が進むと、まず、問題管理システムを使ってバグ情報をやりとりする時間が減らせるでしょう。そして、「バグなのか、それとも新機能なのか」を見極めるための時間も減らせます。その分の時間を、ソフトウェアの機能をより充実させること、顧客の要望に応えることに使えるのです。両者の協調の機会は数多くあります。実は、コーディングの開始前から協力し合うことも可能なのです。</p>
<p>　たとえばテスターは、顧客と協力し、FIT（Framework for Integrated Test）などのツールを使用して顧客のドメインの言葉で受け入れテストを書き、それを自動化することができます。受け入れテストをコーディング開始前に渡されれば、プログラマは、ATDD（Acceptance Test-Driven Development：受け入れテスト駆動開発）を実践できます。プログラマはテストの実行のために必要になる部品を作り、テストに合格するようにコードを書きます。このテストは「回帰スイート」の一部となります。テスターとプログラマがこういうかたちで協力すれば、機能テストは早いうちに完了するので、空いた時間を探索的テスト（exploratory testing）にあてることができます。境界条件のテストや、全体的な流れのテストができるのです。</p>
<p>　さらに一歩進めることもできます。プログラマがコーディングを始める前に、テスターは「どういうテストをするつもりか」という考えを伝えるだけでなく、同時に、プログラマに何か提案はないかと尋ねるのです。そうすれば、プログラマからは、テストカバレッジをあげるのに役立つ情報、あるいは、どれが必要なテストでどれが不要なテストかの見極めに役立つ情報が提供されることが多いのです。テストについて早い段階から知っていれば、プログラマは、これから書こうとするコードがどういうものなのかをかなり明確にしてからコーディングを始めることができます。それによってバグの発生は大幅に減らせるでしょう。たとえば私が関わったあるプロジェクトでは、私が FIT を使って書いてプログラマに提供したテストにより、ワイルドカード検索の際、クエリに具体的にどういう実行結果が求められるかが明らかになりました。プログラマは当初、入力された文字列を補完して検索する機能だけをイメージしていたのですが、どうもそれだけではないとわかったのです。その後、顧客と十分に話し合い、正しい解釈を基にコーディングを始めることができました。テスターとプログラマが協力し合えば、こうしてバグの発生を未然に防ぐことができ、時間も節約できるのです。</p>
<p>　プログラマとテスターは自動化に関しても協力し合うことができます。当然のことながら、プログラマは優れたコーディングプラクティスがどういうものかを理解しています。テスターはプログラマの助けを借りれば、チーム全体で利用できる堅牢なテスト自動化スイートを作ることもできるでしょう。私の知る限り、テストの設計が悪いせいで、自動化プロジェクトが失敗するということが少なくないようです。設計が悪いテストとは、不要なテスト項目が多すぎるものや、テスト項目の独立性が低いものなどを指します。テスターに技術的な知識がないと、独立性の低いテスト項目ができてしまうことがよくあります。自動化などの作業においては、テスターがボトルネックになることが多いので、是非プログラマと協力して効率化をはかるべきでしょう。協力すれば、プログラマも、テストについて早いうちに知ることができます。協力と言っても、簡単なツールを提供するくらいで済むこともありますが、その際に得られるフィードバックは、長い目で見ればコードの質を高めるのに役立ちます。</p>
<p>　テスターは、ソフトウェアを破壊し、プログラマの書いたコードからバグを見つけ出すことだけが自分の仕事である、という考え方をやめるべきです。そしてプログラマは、テスターのことを「自分たちの邪魔をする敵」などと考えるべきではありません。そういう考えをやめれば、協調できる可能性が高まります。プログラマが、品質向上も自分の仕事の一部であると考え、テストしやすいコードを書くことも当然の責務であると考えるようになれば、回帰テストの自動化をテスターと共同で進めることなども簡単にできるようになるでしょう。プログラマとテスターのチームワークで、プロジェクトはまるで奇跡のようにうまくいくはずです。</p>
</article>
<footer>
<p class="license">このエッセイは <a href="https://creativecommons.org/licenses/by/3.0/us/" class="external text" title="https://creativecommons.org/licenses/by/3.0/us/" rel="nofollow">CC-by-3.0-US</a> でライセンスされています。</p>

<div>
    <a class="sns-button" href="https://twitter.com/share?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog087.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/twitter.svg"></a>
    <a class="sns-button" href="https://www.facebook.com/share.php?u=https://yoshi389111.github.io/kinokobooks/prog_ja/prog087.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/facebook.svg"></a>
    <a class="sns-button" href="https://b.hatena.ne.jp/add?mode=confirm&url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog087.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/hatebu.svg"></a>
    <a class="sns-button" href="https://getpocket.com/edit?url=https://yoshi389111.github.io/kinokobooks/prog_ja/prog087.htm" rel="nofollow" target="_blank"><img class="sns-logo" src="../images/pocket.svg"></a>
</div>

<nav>
<ul class="nav-links">
<li class="prev-article"><a href="prog086.htm">&lt; 前のエッセイ</a></li>
<li class="return-index"><a href="index.html">一覧</a></li>
<li class="next-article"><a href="prog088.htm">次のエッセイ &gt;</a></li>
</ul>
</nav>
</footer>
</body>
</html>
